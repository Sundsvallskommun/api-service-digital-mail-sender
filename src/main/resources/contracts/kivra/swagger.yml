---
openapi: 3.0.1

servers:
  - url: https://sender.api.kivra.com
    description: Production environment
  - url: https://sender.sandbox-api.kivra.com
    description: Sandbox environment
info:
  title: Kivra Sweden API
  x-logo:
    url: "assets/Kivra_logo_1920X1080_green.png"
    altText: Kivra logo # don't rename this without fixing assets/redoc-styles.css
  version: v1 and v2

tags:
  - name: "Tenant API - Content"
    description: Endpoints for matching users and sending content
  - name: "Tenant API - Forms"
    description: |
      Endpoints for working with form templates and responses
  - name: "Tenant API - Tenant Management"
    description: Endpoints for creation and administration of tenants (v2)
  - name: "Tenant API - Agreements"
    description: Endpoints for managing signatures and agreements
  - name: "Partner API"
    description: Endpoints for partner access to company mailboxes

x-tagGroups:
  - name: Tenant API
    tags:
      - "Tenant API - Content"
      - "Tenant API - Forms"
      - "Tenant API - Tenant Management"
      - "Tenant API - Agreements"
  - name: Partner API
    tags:
      - "Partner API v1"
      - "Partner API v3"

paths:
  /vX/hamburger:
    get:
      summary: Get your burger
      operationId: Get your burger
      description: Get your free hamburger
      security:
        - oAuth2Client:
            - "get:kivra.vX.hamburger"
      responses:
        200:
          description: empty response confirming that the put operation was successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  variant:
                    type: string
                    example: "Royale with Cheese"

  # ##############################################
  # POST, GET /v2/tenant
  # ##############################################
  /v2/tenant:
    post:
      tags:
        - "Tenant API - Tenant Management"
      summary: Create Tenant
      operationId: Create Tenant (v2)
      description: |
        Creation of tenants via API allows clients to create new tenants in an efficient manner. The created tenant is automatically added to the client scope. The client needs to re-authenticate to have the new scope in effect.
        <aside class="notice">
        Note: Creation of tenants via API is only allowed in certain specific cases and its usage needs to be regulated in the business relationship between the sender party and Kivra.
        </aside>
      security:
        - oAuth2Client:
            - "post:kivra.v2.tenant"
      responses:
        200:
          description: |
            Tenant already existing and added to the client scope
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tenant_v2"
          headers:
            kivra-objkey:
              description: Tenant Key
              schema:
                type: string
                format: "hexadecimal value"
            location:
              description: URL to created Object
              schema:
                type: string
                format: url
        201:
          description: |
            Tenant Created succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tenant_v2"
          headers:
            kivra-objkey:
              description: Tenant Key
              schema:
                type: string
                format: "hexadecimal value"
            location:
              description: URL to created Object
              schema:
                type: string
                format: url
        409:
          description: |
            The tenant could not be created because of a conflict, meaning that a tenant with the same `orgnr` already exists and cannot be automatically added to the client scope. The client may use the `request_access` endpoint to request access to this tenant.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error40915"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Tenant_v2"
    get:
      tags:
        - "Tenant API - Tenant Management"
      summary: List tenants
      operationId: List all tenants accessible to the client
      description: Lists all tenants that are manageable by the current client
      security:
        - oAuth2Client:
            - "get:kivra.v2.tenant"
      parameters:
        - name: orgnr
          in: query
          description: Perform a search to see if a specific Company is available
          required: false
          schema:
            description: Companies unique Vat Number
            type: string
            example: SE556840226601
      responses:
        200:
          description: |
            List of available users
          content:
            application/json:
              schema:
                type: array
                description: List of tenants, can be empty
                items:
                  type: object
                  properties:
                    key:
                      type: string
                      description: Tenant ID
                  example:
                    [
                      { "key": "155748793356fa20e402ae472e51019cf723d7fe35" },
                      { "key": "150231793356fa88a88eae472e51019cf723d7d13a" },
                    ]

  # ##############################################
  # GET /v2/tenant/TKEY
  # ##############################################
  /v2/tenant/{tenantKey}:
    get:
      tags:
        - "Tenant API - Tenant Management"
      summary: Tenant information
      operationId: Get information on tenant
      description: Get detailed information on a tenant
      parameters:
        - name: tenantKey
          in: path
          description: The unique Key for a Tenant
          required: true
          schema:
            type: string
            format: hexadecimal
      security:
        - oAuth2Client:
            - "get:kivra.v2.tenant.{tenantKey}"
      responses:
        200:
          description: |
            Tenant information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tenant_v2"

  # ##############################################
  # PUT /v2/tenant/TKEY/name
  # ##############################################
  /v2/tenant/{tenantKey}/name:
    put:
      tags:
        - "Tenant API - Tenant Management"
      summary: Update tenant name
      operationId: Update tenant name
      description: Update display name for the tenant. The updated name will be visible to the end-users only after they have received a new content.
      parameters:
        - name: tenantKey
          in: path
          description: The unique Key for a Tenant
          required: true
          schema:
            type: string
            format: hexadecimal
      security:
        - oAuth2Client:
            - "put:kivra.v2.tenant.{tenantKey}.name"
      responses:
        200:
          description: empty response confirming that the put operation was successful
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Lenas Konditori AB"

  # ##############################################
  # POST /v2/tenant/TKEY/company_id
  # ##############################################
  /v2/tenant/{tenantKey}/company_id:
    post:
      tags:
        - "Tenant API - Tenant Management"
      summary: Associate company ID to tenant
      operationId: Add company ID
      description: |
        Add a new company ID for a tenant. A tenant can be associated with one or more company ids (Vat number and company name)
      parameters:
        - name: tenantKey
          in: path
          description: The unique Key for a Tenant
          required: true
          schema:
            type: string
            format: hexadecimal
      security:
        - oAuth2Client:
            - "post:kivra.v2.tenant.{tenantKey}.company_id"
      responses:
        204:
          description: empty response confirming that the post operation was successful
        409:
          description: Another tenant with the same `orgnr` already exists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error40915"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                company_id:
                  $ref: "#/components/schemas/CompanyId"

  # ##############################################
  # DELETE /v2/tenant/TKEY/company_id/{orgnr}
  # ##############################################
  /v2/tenant/{tenantKey}/company_id/{orgNr}:
    delete:
      tags:
        - "Tenant API - Tenant Management"
      summary: Delete company ID from tenant
      operationId: Delete company ID
      description: |
        Delete a  company ID from a tenant. A tenant can be associated with one or more company ids (Vat number and company name)
      parameters:
        - name: tenantKey
          in: path
          description: The unique Key for a Tenant
          required: true
          schema:
            type: string
            format: hexadecimal
        - name: orgNr
          in: path
          description: The VAT number of the company_id to be removed from the tenant, for instance `SE556840226601`
          required: true
          schema:
            type: string
            format: hexadecimal
      security:
        - oAuth2Client:
            - "delete:kivra.v2.tenant.{tenantKey}.company_id.{orgnr}"
      responses:
        204:
          description: empty response confirming that the put operation was successful

  # ##############################################
  # POST /v2/tenant/TKEY/icon
  # ##############################################
  /v2/tenant/{tenantKey}/icon:
    post:
      tags:
        - "Tenant API - Tenant Management"
      summary: Provide an icon for a tenant
      operationId: Provide icon
      description: |
        Add or update the tenant icon. If an icon already exists, it will be changed.

        To check the current icon associated to a tenant you can simply check the following address:

        * sandbox: https://sandbox-static.kivra.com/img/tenant/{tenantKey}/icon.png
        * production: https://static.kivra.com/img/tenant/{tenantKey}/icon.png

        The icon needs to be provided according to the following format:

        * Dimensions: squared icon with size between 256x256 px and 512x512 px
        * Alpha Channel: 32-bits
        * Format: PNG
        * File size: up to 1MB

        We recommend to leave a little white area around the logo, to provide the best experience for the users.
      parameters:
        - name: tenantKey
          in: path
          description: The unique Key for a Tenant
          required: true
          schema:
            type: string
            format: hexadecimal
      security:
        - oAuth2Client:
            - "post:kivra.v2.tenant.{tenantKey}.icon"
      responses:
        204:
          description: empty response confirming that the put operation was successful
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                file:
                  $ref: "#/components/schemas/Icon"
            example:
              {
                "file":
                  {
                    "name": "fancy icon",
                    "data": "REVBR ...... EJFRUY=",
                    "content_type": "image/png",
                  },
              }

  # ##############################################
  # POST /v2/tenant/request_access
  # ##############################################
  /v2/tenant/request_access:
    post:
      tags:
        - "Tenant API - Tenant Management"
      summary: Request access to a tenant
      operationId: Request access
      description: |
        Request access to an existing tenant that is outside the client scope. Typically this request follows an unsuccessful attempt to create a tenant that resulted in a conflict error (error 409).

        The meaning of the conflict error is that a tenant is already associated to a `company_id` including the same `orgnr` as in the tenant that the client attempted to post, and the tenant who owns the `orgnr` is outside the scope for the client.

        In Kivra it is allowed to have several different flows on the same tenant, as for instance one flow for invoices and one flow for payment slips. As this flows could be managed by different clients, we need a mechanism to allow sharing a tenant between clients.
        The `request_access` endpoint provide this functionality. As the request may be granted (or denied) asynchronously, after a successfull call to `request_access` the client will need to poll the request until it becomes `accepted` or `rejected`.

        As allowing access to a new tenant requires modification of the scope for the client, an authorization must be performed once the request has been accepted, to retrieve an access token with the new scope.

        If the client posts a new identical request (requesting the same `OrgNr` for the same client), the same object will be returned with an updated status.
      security:
        - oAuth2Client:
            - "post:kivra.v2.tenant.request_access"
      responses:
        201:
          description: Data about the requested tenant
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestAccess"
          headers:
            kivra-objkey:
              description: Object Key for the Request (requestKey)
              schema:
                type: string
                format: "hexadecimal value"
            location:
              description: The complete API url for where to check the status of this request
              schema:
                type: string
                format: "hexadecimal value"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                vat_number:
                  type: string
                  example: "SE556840226601"

  # ##############################################
  # GET /v2/tenant/request_access/{requestKey}
  # ##############################################
  /v2/tenant/request_access/{requestKey}:
    get:
      tags:
        - "Tenant API - Tenant Management"
      summary: Status of an access request
      operationId: Request access status
      description: |
        Gets the updated status for a request generate using the `request_access` endpoint.
      parameters:
        - name: requestKey
          in: path
          description: The unique Key for a request
          required: true
          schema:
            type: string
            format: hexadecimal
      security:
        - oAuth2Client:
            - "get:kivra.v2.tenant.request_access.{requestKey}"
      responses:
        200:
          description: Data about the requested tenant
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestAccess"
          headers:
            kivra-objkey:
              description: Object Key for the Request
              schema:
                type: string
                format: "hexadecimal value"

  # ##############################################
  # GET /v1/tenant/TKEY/user
  # ##############################################
  /v1/tenant/{tenantKey}/user:
    get:
      tags:
        - "Tenant API - Content"
      summary: List available recipient users for a tenant
      operationId: List Users
      description: |
        This resource is used to list all or search for users that are eligible
        for receiving Content from the specific Tenant. The response is a JSON
        list of Objects containing the User's key and SSN. The `diffId`
        contained in the response header can be used to fetch added/removed
        users in subsequent requests to the
        `/v1/tenant/{tenantKey}/user/diff/{diffId}` endpoint.

        If a search is done with a query string and the user doesn’t exist or
        has Opt-ed out from receiving Content from the Tenant, an empty list
        is returned.

        Access to this resource might be enabled or disabled via agreement. To
        match a given list of users, please use the `usermatch` resource.
      parameters:
        - name: tenantKey
          in: path
          description: The unique Key for a Tenant
          required: true
          schema:
            type: string
            format: hexadecimal
        - name: ssn
          in: query
          description: Perform a search to see if specific Users are available
          required: false
          schema:
            description: List of user SSNs
            type: string
            example: "191212121212"
        - name: include
          in: query
          description: List of fields that are returned for each user object
          required: false
          schema:
            type: string
            enum: ["ssn"]
            example: "ssn"
      security:
        - oAuth2Client:
            - "get:kivra.v1.tenant.{tenantKey}.user"
      responses:
        200:
          description: |
            List of available users
          headers:
            diff-id:
              description: |
                An ID that can be used in a subsequent request to
                `/v1/tenant/{tenantKey}/user/diff/{diffId}` to fetch users
                that were added/removed since `diffId` was obtained
              schema:
                type: string
                example: "3831CD15163421134211695294"
          content:
            application/json:
              schema:
                type: array
                description: List of available users, can be empty
                items:
                  $ref: "#/components/schemas/UserList"

  # ##############################################
  # GET /v1/tenant/TKEY/user/diff/{diffId}
  # ##############################################
  /v1/tenant/{tenantKey}/user/diff/{diffId}:
    get:
      tags:
        - "Tenant API - Content"
      summary: |
        List recipient users that were added/removed since a previous request
      operationId: List Users Diff
      description: |
        This resource is used to list users that were added/removed since
        `diffId` was obtained, either from an initial request to the
        `/v1/tenant/{tenantKey}/user` endpoint, or from a subsequent request
        to this endpoint. Note that all `diffId`s that are obtained in a
        series of requests expire 31 days after the **initial** request.
        Therefore, API users must fetch the complete user set at least once
        every 31 days.
      parameters:
        - name: tenantKey
          in: path
          description: The unique Key for a Tenant
          required: true
          schema:
            type: string
            format: hexadecimal
        - name: diffId
          in: path
          description: |
            ID that was returned in header in a previous request and is used
            to calculate what users have been added/removed between that
            request and now
          required: true
          schema:
            type: string
            example: "3831CD15163421134211695294"
        - name: ssn
          in: query
          description: Perform a search to see if specific Users are available
          required: false
          schema:
            type: string
            example: "191212121212"
        - name: include
          in: query
          description: List of fields that are returned for each user object
          required: false
          schema:
            type: string
            enum: ["ssn"]
            example: "ssn"
      security:
        - oAuth2Client:
            - "get:kivra.v1.tenant.{tenantKey}.user.diff.{diffId}"
      responses:
        200:
          description: |
            Lists of added/removed users
          headers:
            diff-id:
              description: |
                An ID that can be used in a subsequent request to
                `/v1/tenant/{tenantKey}/user/diff/{diffId}` to fetch users
                that were added/removed since `diffId` was obtained
              schema:
                type: string
                example: "3831CD15163421134211695294"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDiff"
        404:
          description: |
            This error could indicate that the diffId is no longer valid
            and therefore the URL points to a resource that is no longer
            available

  # ##############################################
  # POST /v1/tenant/TKEY/usermatch
  # ##############################################
  /v1/tenant/{tenantKey}/usermatch:
    post:
      tags:
        - "Tenant API - Content"
      summary: Match a list of recipient users for a specific tenant
      operationId: Match Users
      description: |
        This resource is used to match a list of users to check that they are eligible for receiving Content from
          the specific Tenant.
        The request contains a list of SSNs to be matched, and the response is a filtered list containing only the SSNs that are eligible to receive content from the tenant.
        <aside class="notice">
          If none of the provided SSNs are eligible to receive content from this tenant, an empty list will be returned.
        </aside>
      parameters:
        - name: tenantKey
          in: path
          description: The unique Key for a Tenant
          required: true
          schema:
            type: string
            format: hexadecimal
      requestBody:
        description: |
          List of SSNs to be matched. The payload can be up to 10MB in size, corresponding to about 500.000 SSNs.
          If the payload exceeds 10MB, Kivra will respond with a 413 error.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserMatch"
            example:
              ssns: ["191212121212", "197701032380", "198112172385"]
        required: true
      security:
        - oAuth2Client:
            - "get:kivra.v1.tenant.{tenantKey}.usermatch"
      responses:
        200:
          description: Filtered list of SSNs
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserMatch"
              example:
                ssns: ["191212121212", "198112172385"]

  # ##############################################
  # POST v2 usermatching
  # ##############################################
  /v2/tenant/{tenantKey}/usermatch/ssn:
    post:
      tags:
        - "Tenant API - Content"
      summary: Match a list of ssns to recipient for a specific tenant (v2)
      operationId: Match Users ssn v2
      description: |
        This resource is used to match a list of users to check that they are eligible for receiving Content from the specific Tenant.
        The request contains a list of recipient SSNs to be matched, and the response is a filtered list containing only the SSNs
        that are eligible to receive content from the tenant.
        <aside class="notice">
          If none of the provided SSNs are eligible to receive content from this tenant, an empty list will be returned.
        </aside>
      parameters:
        - name: tenantKey
          in: path
          description: The tenant key the matching should be done against. Recipients that opt-out from the tenant will be excluded.
          required: true
          schema:
            type: string
            format: hexadecimal
      requestBody:
        description: |
          List of SSNs to be matched. The payload can be up to 10MB in size, corresponding to about 500.000 SSNs.
          If the payload exceeds 10MB, Kivra will respond with a 413 error.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserMatchV2SSN"
            example:
              list: ["191212121212","197701032380","198112172385"]
        required: true
      security:
        - oAuth2Client:
            - "get:kivra.v2.tenant.{tenantKey}.usermatch.ssn"
      responses:
        200:
          description: Filtered list of SSNs that matched.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserMatchV2SSN"
              example:
                list: ["191212121212", "198112172385"]

  /v2/tenant/{tenantKey}/usermatch/verified_email:
    post:
      tags:
        - "Tenant API - Content"
      summary: Match a list of emails to recipients for a specific tenant (v2)
      operationId: Match Users verified_email v2
      description: |
        This resource is used to match a list of users to check that they are eligible for receiving Content from the specific Tenant.
        The request contains a list of recipient email addresses to be matched, and the response is a filtered list containing only the
        email addresses that are eligible to receive content from the tenant.
        Email matching is case insensitive, but the queried email case is returned as submitted.
        <aside class="notice">
          If none of the provided email addresses are eligible to receive content from this tenant, an empty list will be returned.
        </aside>
      parameters:
        - name: tenantKey
          in: path
          description: The tenant key the matching should be done against. Recipients that opt-out from the tenant will be excluded.
          required: true
          schema:
            type: string
            format: hexadecimal
      requestBody:
        description: |
          List of email addresses to be matched. The payload can be up to 10MB in size.
          If the payload exceeds 10MB, Kivra will respond with a 413 error.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserMatchV2Email"
            example:
              list: ["fOO@example.com","bAr@EXAMPLE.COM","XYZ@example.COM"]
        required: true
      security:
        - oAuth2Client:
            - "get:kivra.v2.tenant.{tenantKey}.usermatch.verified_email"
      responses:
        200:
          description: Filtered list of email addresses that matched.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserMatchV2Email"
              example:
                list: ["fOO@example.COM", "bAr@EXAMPLE.COM"]

  # ##############################################
  # GET /v1/tenant/TKEY/company
  # ##############################################
  /v1/tenant/{tenantKey}/company:
    get:
      tags:
        - "Tenant API - Content"
      summary: List available recipient companies for a tenant
      operationId: List Companies
      description: |
        This resource is used to list all or search for companies that eligible for receiving Content from the specific Tenant.
        The response is a JSON list of Objects containing the Companies key and Vat Number.

        <aside class="notice">
        If a search is done and the Company doesn’t exist or have Opt-ed out of receiving Content from the Tenant an empty list will be returned.
        </aside>
      parameters:
        - name: tenantKey
          in: path
          description: The unique Key for a Tenant
          required: true
          schema:
            type: string
            format: hexadecimal
        - name: vat_number
          in: query
          description: Perform a search to see if a specific Company is available
          required: false
          schema:
            description: Companies unique Vat Number
            type: string
            example: SE556840226601
      security:
        - oAuth2Client:
            - "get:kivra.v1.tenant.{tenantKey}.company"
      responses:
        200:
          description: |
            List of available companies
          content:
            application/json:
              schema:
                type: array
                description: List of available companies, can be empty
                items:
                  $ref: "#/components/schemas/CompanyList"

  # ##############################################
  # POST /v1/tenant/TKEY/content
  # ##############################################
  /v1/tenant/{tenantKey}/content:
    post:
      tags:
        - "Tenant API - Content"
      summary: Send content (v1)
      operationId: Send content
      description: |
        Metadata is data that Kivra needs to send the Content to the right User. It may also determine how a User can interact with the Content.

        ### Minimum Metadata
        As a minimum one valid recipient identifier is required (`vat_number`, `ssn` or `email`).

        In case several identifiers are specified, Kivra will only try to match the first one and not fall through to try to match the remaining identifiers.
        More specifically Kivra will look first for a `vat_number`, if this is not provided it will look for a `ssn`, if this is not provided either it will look for `email`.

        E.g. if a content has both an `ssn` and `email`, only the `ssn` will be used as identifier, even if there is no positive `ssn` match.
        </aside>

        ### Content v1 vs v2
        There are two API resources to send content to a recipient:
          - `/v1/tenant/TKEY/content` can be used to send one or more PDFs to a recipient.
          - `/v2/tenant/TKEY/content` (documented below) can be used to send PDFs (same as `v1`) or sending one or more HTML+PDF pairs (referred to as responsive content) to a recipient.
          To learn more about the advantages of responsive content see the relative section below in this documentation.

        ### Retained Content
        A retained Content is a Content that is sent to a Recipient who is not yet a user of Kivra. Once that Recipient register with Kivra, the Content will be delivered to that Recipient’s Kivra account. Retained Content has a time limit for how long they can be retained before being deleted, ie removed unless the Recipient registers within a given period of time.

        <aside class="notice">
        Note: Usage of retained content is only allowed for documents of type credit notice and salary slip.
        </aside>

        Sending retained Content uses all the same attributes as a normal Content with the difference for some additional metadata-attributes.
        By enabling the `retain` metadata attribute and setting it to `true` will enable possible retention of a Content. Kivra’s logic is to first look if the Recipient exist. If it does Kivra will deliver the Content as usual, if the Recipient doesn’t exist Kivra will retain the Content for the default amount of time (*30 days*). This makes it easy for an Integrator to issue a "retain or deliver"-logic for all it’s Contents.

        If an integrator want to retain a Content for a another time-period than Kivra’s default if can be done via the `retention_time` additional metadata.

        ### Duplicate control
        If exactly the same payload (content plus metadata, with only exception being the `generated_at` field) is received more than once, only the first occurrence will result in a delivery. In the other occurrences an OK message will be returned, but no corresponding content will be delivered to the receiver. This is a security mechanism to allow senders to safely re-send the same payload in case there is uncertainty on whether the previous sending resulted in a delivery or not. A typical example is in case of timeout error, where the sender cannot establish whether the sending resulted in a content delivery or not.

        <aside class="notice">
        Note: Duplicate control is only available in production, not in sandbox. This allows senders to reuse the same payload several times in the test environment.
        </aside>

        It's important to underline that the duplicate control is made by checking the complete payload (beside `generated_at`), not only the attached content. This means that any change in the payload will cause the duplicate check to fail and the corresponding content to be delivered.

        Another important consequence is that in case a sender wants to safely re-send a PDF content, it is important that the PDF is not generated again between the API calls as this almost certainly results in a slightly different PDF and therefore in a different payload, meaning that the duplication check will not be able to recognise it as a duplicate.

      security:
        - oAuth2Client:
            - "post:kivra.v1.tenant.{tenantKey}.content"
      parameters:
        - name: tenantKey
          in: path
          description: The unique Key for a Tenant
          required: true
          schema:
            type: string
            format: hexadecimal
      responses:
        201:
          description: |
            Content Created succesfully
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Content_user"
                  - $ref: "#/components/schemas/Content_company"
          headers:
            kivra-objkey:
              description: Object Key
              schema:
                type: string
                format: "hexadecimal value"
            kivra-retained:
              description: |
                Boolean denoting if a Content was Retained, Note: this header is **only** returned when a Content is retained
              schema:
                type: boolean
            location:
              description: URL to created Object
              schema:
                type: string
                format: url
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/Content_user"
                - $ref: "#/components/schemas/Content_company"
            examples:
              invoice to user:
                value:
                  ssn: "191212121212"
                  subject: Sample Invoice to User
                  generated_at: "2016-12-12"
                  type: "invoice"
                  files:
                    - name: filename.pdf
                      data: REVBREJFRUY=
                      content_type: application/pdf
                  context:
                    invoice:
                      payment:
                        payable: true
                        currency: SEK
                        due_date: "2017-01-01"
                        total_owed: "123.50"
                        type: SE_OCR
                        method: "1"
                        account: "12345"
                        reference: 426523791
                      invoice_reference: "Invoice Nr #123"
              invoice with variable amount to user:
                value:
                  ssn: "191212121212"
                  subject: Sample Invoice to User
                  generated_at: "2016-12-12"
                  type: "invoice"
                  files:
                    - name: filename.pdf
                      data: REVBREJFRUY=
                      content_type: application/pdf
                  context:
                    invoice:
                      payment:
                        payable: true
                        currency: SEK
                        due_date: "2017-01-01"
                        total_owed: "123.50"
                        type: SE_OCR
                        method: "1"
                        account: "12345"
                        reference: 426523791
                        variable_amount: true
                        min_amount: "50.00"
                      invoice_reference: "Invoice Nr #123"
              invoice with multiple payment options to user:
                value:
                  ssn: "191212121212"
                  subject: Sample Invoice to User
                  generated_at: "2016-12-12"
                  type: "invoice"
                  files:
                    - name: filename.pdf
                      data: REVBREJFRUY=
                      content_type: application/pdf
                  context:
                    invoice:
                      payment_multiple_options:
                        payable: true
                        currency: SEK
                        account: "123456"
                        method: "1"
                        options:
                          - due_date: "2024-02-29"
                            amount: "4711.23"
                            type: "SE_OCR"
                            reference: "771554193"
                            title: "Option 1"
                            description: "The first options in this invoice."
                            icon:
                              name: "this_will_be_ignored.png"
                              content_type: "image/png"
                              data: "Base64-encoded string with PNG data"
                          - due_date: "2024-03-31"
                            amount: "11147.42"
                            type: "SE_OCR"
                            reference: "771554194"
                            title: "Option 2"
                            description: "The second options in this invoice."
                            icon:
                              name: "this_will_be_ignored.png"
                              content_type: "image/png"
                              data: "A different base64-encoded string with PNG data"
                      invoice_reference: "Invoice #24"
              content with flexible option:
                value:
                  ssn: "191212121212"
                  subject: Flexible Invoice to User
                  generated_at: "2022-12-12"
                  type: "invoice"
                  files:
                    - name: filename.pdf
                      data: REVBREJFRUY=
                      content_type: application/pdf
                  context:
                    invoice:
                      payment_multiple_options:
                        payable: true
                        currency: SEK
                        account: "123456"
                        method: "1"
                        options:
                          - due_date: "2024-02-29"
                            amount: "4711.23"
                            type: "SE_OCR"
                            reference: "771554193"
                            title: "Option 1"
                            description: "The first options in this invoice."
                            icon:
                              name: "this_will_be_ignored.png"
                              content_type: "image/png"
                              data: "Base64-encoded string with PNG data"
                        flexible_option:
                          due_date: "2024-02-29"
                          type: "SE_OCR"
                          reference: "771554195"
                          title: "Flexible Option"
                          description: "A flexible option."
                          icon:
                            name: "this_will_be_ignored.png"
                            content_type: "image/png"
                            data: "Base64-encoded string with PNG data"
                            min_limit: "17.00"
                            min_suggested: "23.50"
                            max_suggested: "235.00"
                            max_limit: "500"
                      invoice_reference: "Invoice #23"
              letter to user:
                value:
                  ssn: "191212121212"
                  subject: Sample Letter to User
                  generated_at: "2016-12-12"
                  type: "letter"
                  files:
                    - name: filename.pdf
                      data: REVBREJFRUY=
                      content_type: application/pdf
              payslip to user:
                value:
                  ssn: "191212121212"
                  subject: Sample Payslip to User
                  generated_at: "2016-12-12"
                  type: "letter.salary"
                  retain: true
                  retention_time: "390"
                  files:
                    - name: filename.pdf
                      data: REVBREJFRUY=
                      content_type: application/pdf
              creditnotice to user:
                value:
                  ssn: "191212121212"
                  subject: Sample Creditnotice to User
                  generated_at: "2020-12-12"
                  type: "letter.creditnotice"
                  retain: true
                  retention_time: "30"
                  files:
                    - name: filename.pdf
                      data: REVBREJFRUY=
                      content_type: application/pdf
              booking to user:
                value:
                  ssn: "191212121212"
                  subject: Sample Booking to User
                  generated_at: "2016-12-12"
                  type: "booking"
                  files:
                    - name: filename.pdf
                      data: REVBREJFRUY=
                      content_type: application/pdf
                  context:
                    booking:
                      title: "Appointment"
                      start_time: "2026-12-12T10:00:00Z"
                      end_time: "2026-12-12T11:00:00Z"
                      location: "Somewhere"
                      description: "More details"
                      info_url: url
              invoice.debtcampaign to user:
                value:
                  ssn: "191212121212"
                  subject: Sample Debtcampaign Invoice to User
                  generated_at: "2016-12-12"
                  type: "invoice.debtcampaign"
                  files:
                    - name: filename.pdf
                      data: REVBREJFRUY=
                      content_type: application/pdf
                  context:
                    invoice:
                      payment:
                        payable: true
                        currency: SEK
                        due_date: "2017-01-01"
                        total_owed: "123.50"
                        type: SE_OCR
                        method: "1"
                        account: "12345"
                        reference: 426523791
                      invoice_reference: "Invoice Nr #123"
              invoice reminder to user:
                value:
                  ssn: "191212121212"
                  subject: Sample Invoice Reminder to User
                  generated_at: "2016-12-12"
                  type: "invoice.reminder"
                  files:
                    - name: filename.pdf
                      data: REVBREJFRUY=
                      content_type: application/pdf
                  context:
                    invoice:
                      payment:
                        payable: true
                        currency: SEK
                        due_date: "2017-01-01"
                        total_owed: "123.50"
                        type: SE_OCR
                        method: "1"
                        account: "12345"
                        reference: 426523791
                      invoice_reference: "Invoice Nr #123"
              invoice renewal to user:
                value:
                  ssn: "191212121212"
                  subject: Sample Invoice Renewal to User
                  generated_at: "2016-12-12"
                  type: "invoice.renewal"
                  files:
                    - name: filename.pdf
                      data: REVBREJFRUY=
                      content_type: application/pdf
                  context:
                    invoice:
                      payment:
                        payable: true
                        currency: SEK
                        due_date: "2017-01-01"
                        total_owed: "123.50"
                        type: SE_OCR
                        method: "1"
                        account: "12345"
                        reference: 426523791
                      invoice_reference: "Invoice Nr #123"
              content to company:
                value:
                  vat_number: SE556840226601
                  subject: Sample Content to Company
                  generated_at: "2016-12-12"
                  type: "letter"
                  files:
                    - name: filename.pdf
                      data: REVBREJFRUY=
                      content_type: application/pdf

  # ##############################################
  # POST /v2/tenant/TKEY/content
  # ##############################################
  /v2/tenant/{tenantKey}/content:
    post:
      tags:
        - "Tenant API - Content"
      summary: Send content (v2)
      operationId: Send responsive content
      description: |
        Metadata is data that Kivra needs to send the Content to the right User. It may also determine how a User can interact with the Content.

        ### Minimum Metadata
        As a minimum one valid recipient identifier is required (`vat_number`, `ssn` or `email`).

        In case several identifiers are specified, Kivra will only try to match the first one and not fall through to try to match the remaining identifiers.
        More specifically Kivra will look first for a `vat_number`, if this is not provided it will look for a `ssn`, if this is not provided either it will look for `email`.

        E.g. if a content has both an `ssn` and `email`, only the `ssn` will be used as identifier, even if there is no positive `ssn` match.
        </aside>

        ### Content v1 vs v2
        There are two API resources to send content to a recipient:
          - `/v1/tenant/TKEY/content` (documented above) can be used only to send one or more PDFs to a recipient.
          - `/v2/tenant/TKEY/content` can be used to send PDFs (same as `v1`) or sending one or more HTML+PDF pairs (referred to as responsive content) to a recipient.
          To learn more about the advantages of responsive content see the relative section below in this documentation.

        ### Benefits and usage of responsive content
        As more than 90% of the content sent in Kivra is consumed on mobile devices, it is important to be able to show to the recipient the most important information in an easyly readable way, without relying on the recipient to zoom in on the area of the PDF where the information is presented.

         Responsive content solve this problem by allowing senders to provide 2 versions of the content:
          - a PDF which contains all the information and details that needs to be presented to the recipient
          - an HTML version of the same content that includes an overview of the information and highlights what the sender wants to present to the user.

        Here are a couple of examples on how to use HTML resp. PDF in your communication:
        - Let's consider an invoice where the PDF contains all the information that the invoice must include, while the responsive part (HTML) contains only the due amount, the due date, some information about the product or service that was delivered, the benefits for the customer for using the supplier and some brand information.
        -  Let's consider a salary specification where the PDF contains all the details and how the salary was calculated while the HTML presentes only some key information like the salary total, when the money will be paid and the number of vacation days left.

        ### Restrictions for the HTML part
        Kivra is an archive and it is very important that content sent in Kivra is immutable and does not update itself over time. The recipient should be able to return to a received content at any point in time and see it exactly as it was when it was received.

        As HTML is a format that offers many possibilities there are restrictions on how the HTML is formed:
        - No javascript: **no javascript allowed**, neither inline or fetched from external resources
        - External documents such as images, icons, css, etc. **must be embedded inline in the HTML** file to avoid external links to become bad over time and break the rendering of the HTML

        Privacy is also an important concern for Kivra. For this reason common links are allowed in the HTML but **no user-specific tracking links are allowed**, for instance links containing UTMs or other technology to track the behavior of each particular user.

        ### Retained Content
        A retained Content is a Content that is sent to a Recipient who is not yet a user of Kivra. Once that Recipient register with Kivra, the Content will be delivered to that Recipient’s Kivra account. Retained Content has a time limit for how long they can be retained before being deleted, ie removed unless the Recipient registers within a given period of time.

        <aside class="notice">
        Note: Usage of retained content is only allowed for documents of type credit notice and salary slip.
        </aside>

        Sending retained Content uses all the same attributes as a normal Content with the difference for some additional metadata-attributes.
        By enabling the `retain` metadata attribute and setting it to `true` will enable possible retention of a Content. Kivra’s logic is to first look if the Recipient exist. If it does Kivra will deliver the Content as usual, if the Recipient doesn’t exist Kivra will retain the Content for the default amount of time (*30 days*). This makes it easy for an Integrator to issue a "retain or deliver"-logic for all it’s Contents.

        If an integrator want to retain a Content for a another time-period than Kivra’s default if can be done via the `retention_time` additional metadata.

        ### Duplicate control
        If exactly the same payload (content plus metadata, with only exception being the `generated_at` field) is received more than once, only the first occurrence will result in a delivery. In the other occurrences an OK message will be returned, but no corresponding content will be delivered to the receiver. This is a security mechanism to allow senders to safely re-send the same payload in case there is uncertainty on whether the previous sending resulted in a delivery or not. A typical example is in case of timeout error, where the sender cannot establish whether the sending resulted in a content delivery or not.

        <aside class="notice">
        Note: Duplicate control is only available in production, not in sandbox. This allows senders to reuse the same payload several times in the test environment.
        </aside>

        It's important to underline that the duplicate control is made by checking the complete payload (beside `generated_at`), not only the attached content. This means that any change in the payload will cause the duplicate check to fail and the corresponding content to be delivered.

        Another important consequence is that in case a sender wants to safely re-send a PDF content, it is important that the PDF is not generated again between the API calls as this almost certainly results in a slightly different PDF and therefore in a different payload, meaning that the duplication check will not be able to recognise it as a duplicate.

      security:
        - oAuth2Client:
            - "post:kivra.v1.tenant.{tenantKey}.content"
      parameters:
        - name: tenantKey
          in: path
          description: The unique Key for a Tenant
          required: true
          schema:
            type: string
            format: hexadecimal
      responses:
        201:
          description: |
            Content Created succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Content_user"
          headers:
            kivra-objkey:
              description: Object Key
              schema:
                type: string
                format: "hexadecimal value"
            kivra-retained:
              description: |
                Boolean denoting if a Content was Retained, Note: this header is **only** returned when a Content is retained
              schema:
                type: boolean
            location:
              description: URL to created Object
              schema:
                type: string
                format: url
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Content_user_v2"
            examples:
              invoice to user:
                value:
                  ssn: "191212121212"
                  subject: Sample Invoice to User
                  generated_at: "2016-12-12"
                  type: "invoice"
                  parts:
                    name: document.pdf
                    data: REVBREJFRUY=
                    content_type: application/pdf
                    responsive_part:
                      name: document.html
                      data: PGgxPmNvbnRlbnQgMTwvaDE+CjxwPmNvbnRlbnQgMTwvcD4=
                      content_type: text/html
                  payment:
                    payable: true
                    currency: SEK
                    due_date: "2017-01-01"
                    total_owed: "123.50"
                    type: SE_OCR
                    method: "1"
                    account: "12345"
                    reference: 426523791
              invoice with variable amount to user:
                value:
                  ssn: "191212121212"
                  subject: Sample Invoice to User
                  generated_at: "2016-12-12"
                  type: "invoice"
                  parts:
                    name: document.pdf
                    data: REVBREJFRUY=
                    content_type: application/pdf
                    responsive_part:
                      name: document.html
                      data: PGgxPmNvbnRlbnQgMTwvaDE+CjxwPmNvbnRlbnQgMTwvcD4=
                      content_type: text/html
                  payment:
                    payable: true
                    currency: SEK
                    due_date: "2017-01-01"
                    total_owed: "123.50"
                    type: SE_OCR
                    method: "1"
                    account: "12345"
                    reference: 426523791
                    variable_amount: true
                    min_amount: "50.00"
              invoice with multiple payment options to user:
                value:
                  ssn: "191212121212"
                  subject: Sample Invoice to User
                  generated_at: "2016-12-12"
                  type: "invoice"
                  parts:
                    name: document.pdf
                    data: REVBREJFRUY=
                    content_type: application/pdf
                    responsive_part:
                      name: document.html
                      data: PGgxPmNvbnRlbnQgMTwvaDE+CjxwPmNvbnRlbnQgMTwvcD4=
                      content_type: text/html
                  payment_multiple_options:
                    payable: true
                    currency: SEK
                    account: "123456"
                    method: "1"
                    options:
                      - due_date: "2024-02-29"
                        amount: "4711.23"
                        type: "SE_OCR"
                        reference: "771554193"
                        title: "Option 1"
                        description: "The first options in this invoice."
                        icon:
                          name: "this_will_be_ignored.png"
                          content_type: "image/png"
                          data: "Base64-encoded string with PNG data"
                      - due_date: "2024-03-31"
                        amount: "11147.42"
                        type: "SE_OCR"
                        reference: "771554194"
                        title: "Option 2"
                        description: "The second options in this invoice."
                        icon:
                          name: "this_will_be_ignored.png"
                          content_type: "image/png"
                          data: "A different base64-encoded string with PNG data"
              invoice with flexible option:
                value:
                  ssn: "191212121212"
                  subject: Flexible Invoice to User
                  generated_at: "2022-12-12"
                  type: "invoice"
                  files:
                    - name: filename.pdf
                      data: REVBREJFRUY=
                      content_type: application/pdf
                  context:
                    invoice:
                      payment_multiple_options:
                        payable: true
                        currency: SEK
                        account: "123456"
                        method: "1"
                        options:
                          - due_date: "2024-02-29"
                            amount: "4711.23"
                            type: "SE_OCR"
                            reference: "771554193"
                            title: "Option 1"
                            description: "The first options in this invoice."
                            icon:
                              name: "this_will_be_ignored.png"
                              content_type: "image/png"
                              data: "Base64-encoded string with PNG data"
                        flexible_option:
                          due_date: "2024-02-29"
                          type: "SE_OCR"
                          reference: "771554195"
                          title: "Flexible Option"
                          description: "A flexible option."
                          icon:
                            name: "this_will_be_ignored.png"
                            content_type: "image/png"
                            data: "Base64-encoded string with PNG data"
                            min_limit: "17.00"
                            min_suggested: "23.50"
                            max_suggested: "235.00"
                            max_limit: "500"
                      invoice_reference: "Invoice #23"
              letter to user:
                value:
                  ssn: "191212121212"
                  subject: Sample Content to User
                  generated_at: "2016-12-12"
                  type: "letter"
                  parts:
                    name: document.pdf
                    data: REVBREJFRUY=
                    content_type: application/pdf
                    responsive_part:
                      name: document.html
                      data: PGgxPmNvbnRlbnQgMTwvaDE+CjxwPmNvbnRlbnQgMTwvcD4=
                      content_type: text/html
              letter to user (identified by email):
                value:
                  email: "someone@example.com"
                  subject: Sample Letter to User (identified by email)
                  generated_at: "2016-12-12"
                  type: "letter"
                  parts:
                    name: document.pdf
                    data: REVBREJFRUY=
                    content_type: application/pdf
                    responsive_part:
                      name: document.html
                      data: PGgxPmNvbnRlbnQgMTwvaDE+CjxwPmNvbnRlbnQgMTwvcD4=
                      content_type: text/html
              payslip to user:
                value:
                  ssn: "191212121212"
                  subject: Sample Payslip to User
                  generated_at: "2016-12-12"
                  type: "letter.salary"
                  retain: true
                  retention_time: "390"
                  parts:
                    name: document.pdf
                    data: REVBREJFRUY=
                    content_type: application/pdf
                    responsive_part:
                      name: document.html
                      data: PGgxPmNvbnRlbnQgMTwvaDE+CjxwPmNvbnRlbnQgMTwvcD4=
                      content_type: text/html
              creditnotice to user:
                value:
                  ssn: "191212121212"
                  subject: Sample Creditnotice to User
                  generated_at: "2020-12-12"
                  type: "letter.creditnotice"
                  retain: true
                  retention_time: "30"
                  parts:
                    name: document.pdf
                    data: REVBREJFRUY=
                    content_type: application/pdf
                    responsive_part:
                      name: document.html
                      data: PGgxPmNvbnRlbnQgMTwvaDE+CjxwPmNvbnRlbnQgMTwvcD4=
                      content_type: text/html
              booking to user:
                value:
                  ssn: "191212121212"
                  subject: Sample Booking to User
                  generated_at: "2016-12-12"
                  type: "booking"
                  parts:
                    name: document.pdf
                    data: REVBREJFRUY=
                    content_type: application/pdf
                    responsive_part:
                      name: document.html
                      data: PGgxPmNvbnRlbnQgMTwvaDE+CjxwPmNvbnRlbnQgMTwvcD4=
                      content_type: text/html
                  booking:
                    title: "Appointment"
                    start_time: "2026-12-12T10:00:00Z"
                    end_time: "2026-12-12T11:00:00Z"
                    location: "Somewhere"
                    description: "More details"
                    info_url: url
              invoice.debtcampaign to user:
                value:
                  ssn: "191212121212"
                  subject: Sample Debtcampaign Invoice to User
                  generated_at: "2016-12-12"
                  type: "invoice.debtcampaign"
                  parts:
                    name: document.pdf
                    data: REVBREJFRUY=
                    content_type: application/pdf
                    responsive_part:
                      name: document.html
                      data: PGgxPmNvbnRlbnQgMTwvaDE+CjxwPmNvbnRlbnQgMTwvcD4=
                      content_type: text/html
                  payment:
                    payable: true
                    currency: SEK
                    due_date: "2017-01-01"
                    total_owed: "123.50"
                    type: SE_OCR
                    method: "1"
                    account: "12345"
                    reference: 426523791
              invoice reminder to user:
                value:
                  ssn: "191212121212"
                  subject: Sample Invoice Reminder to User
                  generated_at: "2016-12-12"
                  type: "invoice.reminder"
                  parts:
                    name: document.pdf
                    data: REVBREJFRUY=
                    content_type: application/pdf
                    responsive_part:
                      name: document.html
                      data: PGgxPmNvbnRlbnQgMTwvaDE+CjxwPmNvbnRlbnQgMTwvcD4=
                      content_type: text/html
                  payment:
                    payable: true
                    currency: SEK
                    due_date: "2017-01-01"
                    total_owed: "123.50"
                    type: SE_OCR
                    method: "1"
                    account: "12345"
                    reference: 426523791
              invoice renewal to user:
                value:
                  ssn: "191212121212"
                  subject: Sample Invoice Renewal to User
                  generated_at: "2016-12-12"
                  type: "invoice.renewal"
                  parts:
                    name: document.pdf
                    data: REVBREJFRUY=
                    content_type: application/pdf
                    responsive_part:
                      name: document.html
                      data: PGgxPmNvbnRlbnQgMTwvaDE+CjxwPmNvbnRlbnQgMTwvcD4=
                      content_type: text/html
                  payment:
                    payable: true
                    currency: SEK
                    due_date: "2017-01-01"
                    total_owed: "123.50"
                    type: SE_OCR
                    method: "1"
                    account: "12345"
                    reference: 426523791
              content to company:
                value:
                  vat_number: SE556840226601
                  subject: Sample Content to Company
                  generated_at: "2016-12-12"
                  type: "letter"
                  parts:
                    name: document.pdf
                    data: REVBREJFRUY=
                    content_type: application/pdf
                    responsive_part:
                      name: document.html
                      data: PGgxPmNvbnRlbnQgMTwvaDE+CjxwPmNvbnRlbnQgMTwvcD4=
                      content_type: text/html
              form to user:
                value:
                  ssn: "191212121212"
                  subject: Sample Content to User
                  generated_at: "2016-12-12"
                  type: "letter.form"
                  form:
                    id: 2877d684-a340-4e4c-867f-d93283787b01
                    sender_reference:
                      internal_id: 6eb7d1b9-ccd6-408f-ade7-9a1837be3ecf
                    days_to_expiry: 30
                  parts:
                    name: document.pdf
                    data: REVBREJFRUY=
                    content_type: application/pdf
                    responsive_part:
                      name: document.html
                      data: PGgxPmNvbnRlbnQgMTwvaDE+CjxwPmNvbnRlbnQgMTwvcD4=
                      content_type: text/html
              campaign to user:
                value:
                  ssn: "191212121212"
                  subject: Sample Content to User
                  generated_at: "2016-12-12"
                  type: "letter"
                  campaign:
                    tag: summer_2023
                  parts:
                    name: document.pdf
                    data: REVBREJFRUY=
                    content_type: application/pdf
                    responsive_part:
                      name: document.html
                      data: PGgxPmNvbnRlbnQgMTwvaDE+CjxwPmNvbnRlbnQgMTwvcD4=
                      content_type: text/html

  # ##############################################
  # POST, GET /v1/tenant/tenantKey/form
  # ##############################################
  /v2/tenant/{tenantKey}/form:
    post:
      tags:
        - "Tenant API - Forms"
      summary: Create form template
      operationId: createFormTemplate
      description: |
        A form template is a list of questions you would like to ask users. When sending content you can attach a form you would like a user to complete.

        Form templates are owned by the client that created them. What this means is that only the client can call the response endpoints.
        However if the client has the tenant scope it can call form template endpoints and even include a form when sending content.

        ### How to send a form to the user
        When sending a content to the user include the form template key in the context object. See `Tenant API - Content` -> `Send content (PDF) to a recipient (user or company)` for more information.
      security:
        - oAuth2Client:
            - "post:kivra.v1.tenant.{tenantKey}"
      parameters:
        - name: tenantKey
          in: path
          description: The tenant key for the tenant who is creating the form template.
          required: true
          schema:
            type: string
            format: hexadecimal
      responses:
        200:
          description: |
            Form template created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FormTemplate"
        400:
          description: |
            Can't process the request. Likely due to a client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FormErrorResponse"
              examples:
                invalid_json:
                  value:
                    code: 40000
                    short_message: "Invalid JSON"
                    long_message: "Could not parse posted body as JSON"
        401:
          description: |
            Not authorized to make the request.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FormTemplate"
    get:
      tags:
        - "Tenant API - Forms"
      summary: Get form template keys
      operationId: getFormTemplateKey
      description: |
        Given a tenant key returns all form template keys associated with forms they created.
      security:
        - oAuth2Client:
            - "get:kivra.v2.tenant.{tenantKey}"
      parameters:
        - name: tenantKey
          in: path
          description: The unique key for a tenant for whom the form templates belongs to.
          required: true
          schema:
            type: string
            format: hexadecimal
      responses:
        200:
          description: |
            List of form template keys
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FormTemplateKey"
        401:
          description: |
            Not authorized to make the request

  # ##############################################
  # GET /v2/tenant/{tenantKey}/form/{formTemplateKey}
  # ##############################################
  /v2/tenant/{tenantKey}/form/{formTemplateKey}:
    get:
      tags:
        - "Tenant API - Forms"
      summary: Get form template
      operationId: getFormTemplate
      description: |
        Given a tenant key and a form template key returns the form template that the tenant created.
      security:
        - oAuth2Client:
            - "get:kivra.v2.tenant.{tenantKey}"
      parameters:
        - name: tenantKey
          in: path
          description: The unique key for a tenant for whom the form template belongs to.
          required: true
          schema:
            type: string
            format: hexadecimal
        - name: formTemplateKey
          in: path
          description: The form template key associated with the form template.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: |
            Form template
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FormTemplate"
        401:
          description: |
            Not authorized to make the request
        404:
          description: |
            Form template not found

  # ##############################################
  # GET /v2/tenant/{tenantKey}/form/{formTemplateKey}/responses
  # ##############################################
  /v2/tenant/{tenantKey}/form/{formTemplateKey}/responses:
    get:
      tags:
        - "Tenant API - Forms"
      summary: Get form response keys
      operationId: getFormResponseKeys
      description: |
        Only the client that created the form template associated with the response can call this endpoint.

        Given a tenant key and a form template key returns the form response key associated with form responses submitted by users.
      security:
        - oAuth2Client:
            - "get:kivra.v2.tenant.{tenantKey}"
      parameters:
        - name: tenantKey
          in: path
          description: The unique key for a tenant for whom the form responses belong to.
          required: true
          schema:
            type: string
            format: hexadecimal
        - name: formTemplateKey
          in: path
          description: The form template key associated with the form responses.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: |
            Form response ids
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FormResponseKeys"
        400:
          description: |
            Can't process the request. Likely due to a client error.
        401:
          description: |
            Not authorized to make the request
        403:
          description: |
            Forbidden from accessing the form response keys
        404:
          description: |
            The form template associated with formTemplateKey does not exist.


  # ##############################################
  # GET, DELETE /v2/tenant/{tenantKey}/form/{formTemplateKey}/responses/{responseKey}
  # ##############################################
  /v2/tenant/{tenantKey}/form/{formTemplateKey}/responses/{formResponseKey}:
    get:
      tags:
        - "Tenant API - Forms"
      summary: Get form response
      operationId: getFormResponse
      description: |
        Only the client that created the form template associated with the response can call this endpoint.

        Given a tenant key, form template key and form response key returns the form response submitted by a user.
      security:
        - oAuth2Client:
            - "get:kivra.v2.tenant.{tenantKey}"
      parameters:
        - name: tenantKey
          in: path
          description: The unique key for a tenant for whom the form response belongs to.
          required: true
          schema:
            type: string
            format: hexadecimal
        - name: formTemplateKey
          in: path
          description: The form template key associated with the form template.
          required: true
          schema:
            type: string
            format: uuid
        - name: formResponseKey
          in: path
          description: The form response key associated with the form response.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: |
            Form response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FormResponse"
        400:
          description: |
            Can't process the request. Likely due to a client error.
        401:
          description: |
            Not authorized to make the request
        403:
          description: |
            Forbidden from accessing the form response keys
        404:
          description: |
            Either the form template associated with the given formTemplateKey does not exist or the form response associated with the given responseKey does not exist.
    delete:
      tags:
        - "Tenant API - Forms"
      summary: Delete form response
      operationId: deleteFormResponse
      description: |
        Given a tenant key, form template key and form response key deletes the form response submitted by a user.

        Only the client that created the form template associated with the response can call this endpoint.

        ### Form responses potentially contain sensitive data. You are recommended to delete form responses from Kivra as you consume them.
      security:
        - oAuth2Client:
            - "delete:kivra.v2.tenant.{tenantKey}"
      parameters:
        - name: tenantKey
          in: path
          description: The unique Key for a Tenant for whom the form belongs to.
          required: true
          schema:
            type: string
            format: hexadecimal
        - name: formTemplateKey
          in: path
          description: The form_template_key associated with the form template.
          required: true
          schema:
            type: string
            format: uuid
        - name: formResponseKey
          in: path
          description: The form response key associated with the form responses.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: |
            Form deleted
        400:
          description: |
            Can't process the request. Likely due to a client error.
        401:
          description: |
            Not authorized to make the request
        403:
          description: |
            Forbidden from accessing the form response keys
        404:
          description: |
            Either the form template associated with the given formTemplateKey does not exist or the form response associated with the given responseKey does not exist.

  # ##############################################
  # GET,POST /v1/tenant/TKEY/agreement
  # ##############################################
  /v1/tenant/{tenantKey}/agreement:
    post:
      tags:
        - "Tenant API - Agreements"
      summary: Post an agreement to be signed
      operationId: Post Agreement
      description:
        This resource is used to post an agreement to be signed by the recipients
        listed in the metadata. An Agreement ID will be returned.
      security:
        - oAuth2Client:
            - "post:kivra.v1.tenant.{tenantKey}.agreement"
      parameters:
        - name: tenantKey
          in: path
          description: The unique Key for a Tenant
          required: true
          schema:
            type: string
            format: hexadecimal
      responses:
        200:
          description: Agreement created succesfully
          content:
            application/json:
              schema:
                type: string
                example: "15544700816b7d63c83d6e476493879b5043ec9d7b"
        400:
          description: Agreement PDF was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error40045"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Agreement"
    get:
      tags:
        - "Tenant API - Agreements"
      summary: List all agreements for a tenant, with their current status
      operationId: List agreements
      description: List all agreements created by a tenant, with their current status.
      security:
        - oAuth2Client:
            - "post:kivra.v1.tenant.{tenantKey}.agreement"
      parameters:
        - name: tenantKey
          in: path
          description: The unique Key for a Tenant
          required: true
          schema:
            type: string
            format: hexadecimal
      responses:
        "200":
          description: List of agreements and their status
          content:
            application/json:
              schema:
                type: array
                description: list
                items:
                  $ref: "#/components/schemas/AgreementStateShort"
                example:
                  - key: "1527232009ba54f8186d8c43e2a3c8092b57ca2739"
                    state: active
                  - key: "155265136911763308f2514ff3aa6dacc8211a2107"
                    state: revoked
                  - key: "15100645203cff9f19d92443848c8a2f1cbf257510"
                    state: completed

  # ##############################################
  # GET /v1/tenant/TKEY/agreement/AKEY
  # ##############################################
  /v1/tenant/{tenantKey}/agreement/{agreementKey}:
    get:
      tags:
        - "Tenant API - Agreements"
      summary: Agreement object with current status and updated metadata
      operationId: Get agreement
      description: Get an agreement with current status and updated metadata
      security:
        - oAuth2Client:
            - "post:kivra.v1.tenant.{tenantKey}.agreement.{agreementKey}"
      parameters:
        - name: tenantKey
          in: path
          description: The unique Key for a Tenant
          required: true
          schema:
            type: string
            format: hexadecimal
        - name: agreementKey
          in: path
          description: The unique Key for an Agreement
          required: true
          schema:
            type: string
            format: hexadecimal
      responses:
        "200":
          description: Agreement object with current status and updated metadata
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AgreementStateDetailed"

  # ##############################################
  # GET /v1/tenant/TKEY/agreement/AKEY/revoke
  # ##############################################
  /v1/tenant/{tenantKey}/agreement/{agreementKey}/revoke:
    post:
      tags:
        - "Tenant API - Agreements"
      summary: Revoke an agreement
      operationId: Revoke agreement
      description: |
        Revoke an agreement. An agreement once revoked can no longer be accessed or signed by any of the parties. An agreement can only be rekoved if in state *active*, and after revoke will be put in state *revoked*. A revoked agreement can never become active again.
      security:
        - oAuth2Client:
            - "post:kivra.v1.tenant.{tenantKey}.agreement.{agreementKey}.revoke"
      parameters:
        - name: tenantKey
          in: path
          description: The unique Key for a Tenant
          required: true
          schema:
            type: string
            format: hexadecimal
        - name: agreementKey
          in: path
          description: The unique Key for an Agreement
          required: true
          schema:
            type: string
            format: hexadecimal
      responses:
        "204":
          description: empty response confirming that the revoke operation was successful
      requestBody:
        description: empty JSON body
        content:
          application/json:
            schema: {}

  # ##############################################
  # GET /v1/tenant/TKEY/agreement/AKEY/covenant
  # ##############################################
  /v1/tenant/{tenantKey}/agreement/{agreementKey}/covenant:
    get:
      tags:
        - "Tenant API - Agreements"
      summary: Get the covenant file (signed agreement)
      operationId: Get covenant agreement
      description: |
        Get the covenant file (the signed version of the agreement).
      security:
        - oAuth2Client:
            - "post:kivra.v1.tenant.{tenantKey}.agreement.{agreementKey}.covenant"
      parameters:
        - name: tenantKey
          in: path
          description: The unique Key for a Tenant
          required: true
          schema:
            type: string
            format: hexadecimal
        - name: agreementKey
          in: path
          description: The unique Key for an Agreement
          required: true
          schema:
            type: string
            format: hexadecimal
      responses:
        "200":
          description: The covenant file as a PDF file with base64 encoding
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    description: The name of the file
                    type: string
                    example: "agreement7456_completed.pdf"
                  data:
                    description: The covenant file as a PDF file with base64 encoding
                    type: string
                    format: base64
                    example: "REVBREJFRUY="
                  sha256:
                    description: the signature to verify the file's authenticity
                    type: string

  # ##############################################
  # GET /v1/partner/company
  # ##############################################
  /v1/partner/company:
    get:
      tags:
        - "Partner API v1"
      summary: Lookup a specific company
      operationId: Find Company
      description: |
        This resource allows a partner to look if a specific company has granted access to its mailbox.
        <aside class="notice">
        If a search is done and the Company doesn’t exist in Kivra or has not granted access to the partner, an empty list will be returned.
        </aside>
      parameters:
        - name: vat_number
          in: query
          description: Perform a search to see if a specific Company is available for access
          required: true
          schema:
            description: Company's unique VAT number
            type: string
            example: SE556840226601
      security:
        - oAuth2Client:
            - "get:kivra.v1.partner.company"
      responses:
        200:
          description: Company key for the company with the matching VAT number
          content:
            application/json:
              schema:
                type: object
                properties:
                  key:
                    description: Company's unique Key
                    type: string
                    example: "15236156848eefa1dc75364af2be38c98eb3aae223"

  # ##############################################
  # GET /v1/partner/company/COMPKEY/content
  # ##############################################
  /v1/partner/company/{companyKey}/content:
    get:
      tags:
        - "Partner API v1"
      summary: Get the company inbox
      operationId: Get company inbox
      description: This resource allows to access a high level description for each content in the company inbox, to allow for a first sorting and filtering of the content.
      parameters:
        - name: companyKey
          in: path
          description: The unique key for the company object being retrieved
          required: true
          schema:
            description: Company's unique key
            type: string
      security:
        - oAuth2Client:
            - "get:kivra.v1.partner.company.{companyKey}"
      responses:
        200:
          description: High level description of content items in the company inbox
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CompanyInbox"

  # ##############################################
  # GET /v1/partner/company/COMPKEY/content/CONTKEY
  # ##############################################
  /v1/partner/company/{companyKey}/content/{contentKey}:
    get:
      tags:
        - "Partner API v1"
      summary: Get metadata for a content.
      operationId: Get content metadata
      description:
        This resource allows to get complete metadata information for a particular content.
        <aside class="notice">
        Depending on the `content_type` for each parts of the content, Kivra will return either a `key` to a binary file to be retrieved or (for text based contents) the `body` of the content itself.
        </aside>
      parameters:
        - name: companyKey
          in: path
          description: The unique key for the company object being retrieved
          required: true
          schema:
            description: Company's unique key
            type: string
        - name: contentKey
          in: path
          description: The unique key for a specific content
          required: true
          schema:
            description: Content's unique key
            type: string
      security:
        - oAuth2Client:
            - "get:kivra.v1.partner.company.{companyKey}.**"
      responses:
        200:
          description: Complete metadata for the specific content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CompanyContent"

  # ##############################################
  # GET /v1/partner/company/COMPKEY/content/CONTKEY/file/FKEY/raw
  # ##############################################
  /v1/partner/company/{companyKey}/content/{contentKey}/file/{fileKey}/raw:
    get:
      tags:
        - "Partner API v1"
      summary: Get raw file in binary format
      operationId: Get raw file
      description: This resource allows to get the raw file in binary format.
      parameters:
        - name: companyKey
          in: path
          description: The unique key for the company object being retrieved
          required: true
          schema:
            description: Company's unique key
            type: string
        - name: contentKey
          in: path
          description: The unique key for a specific content
          required: true
          schema:
            description: Content's unique key
            type: string
        - name: fileKey
          in: path
          description: The unique key for a specific file
          required: true
          schema:
            description: File's unique key
            type: string
      security:
        - oAuth2Client:
            - "get:kivra.v1.partner.company.{companyKey}.**"
      responses:
        200:
          description: The content type will be the same as the file, so for a typical pdf it will be `application/pdf`
          content:
            application/json:
              schema:
                type: string
                format: binary

  # ##############################################
  # POST /v1/partner/company/COMPKEY/content/CONTKEY/STATUS
  # ##############################################
  /v1/partner/company/{companyKey}/content/{contentKey}/{status}:
    post:
      tags:
        - "Partner API v1"
      summary: Set status for content
      operationId: Set status for content
      description: This resource allows to set the status for a specific content. It is used by the partner to set whether the content should be marked as viewed or paid.
      parameters:
        - name: companyKey
          in: path
          description: The unique key for the company object being retrieved
          required: true
          schema:
            description: Company's unique key
            type: string
        - name: contentKey
          in: path
          description: The unique key for a specific content
          required: true
          schema:
            description: Content's unique key
            type: string
        - name: status
          in: path
          description: The specific state to be set for this content, can be `paid`, `unpaid`, `view` or `unview`
          required: true
          schema:
            description: The new state to be set for the content
            type: string
      security:
        - oAuth2Client:
            - "get:kivra.v1.partner.company.{companyKey}.**"
      responses:
        204:
          description: empty response confirming that the operation was successful
      requestBody:
        description: empty JSON body
        content:
          application/json:
            schema: {}

  # ##############################################
  # GET /v3/partner/company
  # ##############################################
  /v3/partner/company:
    get:
      tags:
        - "Partner API v3"
      summary: List accessible companies
      operationId: List companies
      description: List the companies the client has access to
      parameters:
        - name: field
          in: query
          schema:
            type: array
            items:
              $ref: '#/components/schemas/FieldQueryParameter'
        - name: vat_number
          in: query
          schema:
            type: array
            items:
              $ref: '#/components/schemas/VatNumber'
      responses:
        '200':
          description: >
            If `vat_number` is given, the repsonse will only include companies with VAT numbers in that list.
            The `field` parameter controls which columns (CSV) or properties (JSON) to include in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseCompany'
            text/csv:
              schema:
                example: |
                  key,type,name,vat_number
                  2156077433683911cdca5fd4563bded979572454cb9,company,Cornelias
                  Café AB,SE556000475501
                type: string

  # ##############################################
  # GET /v3/partner/company/COMPKEY
  # ##############################################
  /v3/partner/company/{companyKey}:
    get:
      tags:
        - "Partner API v3"
      summary: Get a single company
      operationId: Get company
      description: Get a single company
      parameters:
        - name: companyKey
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/CompanyKey'
        - name: field
          in: query
          schema:
            type: array
            items:
              $ref: '#/components/schemas/FieldQueryParameter'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullCompany'

  # ##############################################
  # GET /v3/partner/company/COMPKEY/content
  # ##############################################
  /v3/partner/company/{companyKey}/content:
    get:
      tags:
        - "Partner API v3"
      summary: List company inbox content
      operationId: GET_company-companyKey-content
      description: |
        List the content this company has received.
        This may be filtered by certain `labels` and specific fields may be selected using `field`.

        Note that more content metadata is available via the
        [Get specific content](#tag/Partner-API-v3/operation/Get%20content) endpoint.
      parameters:
        - name: companyKey
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/CompanyKey'
        - name: handled
          in: query
          schema:
            $ref: '#/components/schemas/HandledLabel'
        - name: viewed
          in: query
          schema:
            $ref: '#/components/schemas/ViewedLabel'
        - name: field
          in: query
          schema:
            type: array
            items:
              $ref: '#/components/schemas/FieldQueryParameter'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseContentMetadata'

  # ##############################################
  # GET,PATCH /v3/partner/company/COMPKEY/content/CONTKEY
  # ##############################################
  /v3/partner/company/{companyKey}/content/{contentKey}:
    get:
      tags:
        - "Partner API v3"
      summary: Get specific content
      description: |
        ### Content metadata

        Get metadata about a specific content in JSON format.

        If the interpreter service is enabled for a recipient, it can add structured metadata to content which has been received.
        The `interpreted` label indicates if the interpreter has run for a given content.
        Interpreted data is never used in place of metadata provided by the sender or Kivra, it can only be added.
        Any property of the response that was added by the interpreter is clearly identified as such.
        If an interpreted property is an object, it will have an `interpreted` property which is `true`.
        If an interpreted property is a primitive value, its key path will be present in the `interpreted_fields` property.
        See the response schema below for details.

        ### Content file data

        A given content can contain multiple files ("parts"). Fetching of such parts is done by passing the `part` query parameter.

        A part can also be selected by setting the `Accept` header to the MIME type of the part you want
        (see `parts` in the metadata JSON response). You will receive the first part that matches the given
        MIME type.
      operationId: Get content
      parameters:
        - name: companyKey
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/CompanyKey'
        - name: contentKey
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ContentKey'
        - name: part
          in: query
          schema:
            $ref: '#/components/schemas/PartQueryParameter'
      responses:
        '200':
          description: Content metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullContentMetadata'
            '*/*':
              schema:
                $ref: '#/components/schemas/ContentPart'
    patch:
      tags:
        - "Partner API v3"
      summary: Update content metadata
      operationId: Update content metadata
      parameters:
        - name: companyKey
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/CompanyKey'
        - name: contentKey
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ContentKey'
      responses:
        '200':
          description: Content metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullContentMetadata'
            '*/*':
              schema:
                $ref: '#/components/schemas/ContentPart'
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                handled:
                  description: Mark the content as `handled`/`unhandled`
                  $ref: '#/components/schemas/HandledLabel'
                viewed:
                  description: Mark the content as `viewed`/`unviewed`
                  $ref: '#/components/schemas/ViewedLabel'
              type: object
        required: true

components:
  schemas:
    # ##############################################
    # SCHEMA Content_user
    # ##############################################
    Content_user:
      type: object
      properties:
        ssn:
          description: |
            User's unique SSN, according to the `YYYYMMDDnnnn` format
          type: string
          writeOnly: true
          example: "191212121212"
        email:
          description: |
            A kivra user's verified email address.
          type: string
          writeOnly: true
          example: "Kivra.Sweden@example.com"
        subject:
          description: |
            The subject/title will be visibile in the Recipients Inbox.
            Keep the subject short and concise (i.e. up to 30-35 characters) to make sure that is fully visible on most screen sizes.
            Avoid using personal and sensitive information in the subject.
          type: string
          example: "Invoice for March 2022"
        generated_at:
          type: string
          format: ISO8601
          example: "2022-12-31"
          description: |
            Optional attribute which denotes when a specific Content was generated at the tenant/integrator’s site.
            The attribute will be used for sorting in the Kivra user interface, which makes it possible for a tenant or integrator to control the sorting.
        type:
          type: string
          example: "letter"
          description: |
            Optional attribute providing information about the type of content being sent.
            The type of a content may influence how the user interacts with the content and how the user is notified about the content.
            Allowed values are:
            - `"letter"`: |
              indicating that the content is an information letter. This is the default type for all non-payable content.
            - `"letter.salary"`: |
              indicating that the content is a salary specification.
            - `"letter.creditnotice"`: |
              indicating that the content is a creditnotice.
            - `"invoice"`: |
              indicating that the content is an invoice. A valid "payment" object needs to be provided and the "payable" attribute must be set to true.
              This is the default type for all payable content.
            - `"invoice.reminder"`: |
              indicating that the content is an invoice, a reminder for a previously unpaid invoice.
              The invoice might include late fees and other differences compared to the original invoice.
              A valid "payment" object needs to be provided and the "payable" attribute must be set to true.
            - `"invoice.debtcampaign"`: |
              indicating that the content is an invoice or payment plan from a debt collection company.
              The invoice might include fees such as interest and reminder fees.
              A valid "payment" object needs to be provided and the "payable" attribute must be set to "true".
              This content type enables long due dates with a longer notification scheme
            - `"invoice.renewal"`: |
              indicating that the content is not a real invoice, but an offer that is voluntary to pay for the receiver.
              It can be used to send an offer to renew a subscription, insurance or similar.
              A valid "payment" object needs to be provided and the "payable" attribute must be set to true.
            - `"invoice.debtcollection"`: |
                indicating that the content is a debt collection claim (in Swedish: "inkassokrav").
                A valid "payment" object needs to be provided and the "payable" attribute must be set to true.
            - `"booking"`: |
            indicating that the content is a booking/appointement.
        retain:
          description: |
            Boolean denoting if Kivra should try and retain this Content if it can’t be delivered. Default `false`.
            Please note that retain must never be set to `true` for payable content.
          type: boolean
          writeOnly: true
          example: false
        retention_time:
          description: |
            How long to retain a Content. Supported values: `"30"` and `"390"`
          type: string
          writeOnly: true
          example: "30"
          enum: ["30", "390"]
        files:
          description: Array of file Objects
          type: array
          writeOnly: true
          items:
            $ref: "#/components/schemas/File"
        context:
          type: object
          writeOnly: true
          description: Optionally specify additional information
          properties:
            invoice:
              type: object
              description: Optionally specify invoice information
              properties:
                payment_or_payment_multiple_options:
                  oneOf:
                    - $ref: "#/components/schemas/Payment"
                    - $ref: "#/components/schemas/PaymentMultipleOptions"
                invoice_reference:
                  type: string
                  description: Tenant’s own Invoice Reference
                  example: "Invoice Nr #123"
            booking:
              description: Optionally specify booking information
              $ref: "#/components/schemas/Booking"

    # ##############################################
    # SCHEMA Content_user_v2
    # ##############################################
    Content_user_v2:
      type: object
      properties:
        ssn:
          description: |
            User's unique SSN, according to the `YYYYMMDDnnnn` format
          type: string
          writeOnly: true
          example: "191212121212"
        email:
          description: |
            A kivra user's verified email address.
          type: string
          writeOnly: true
          example: "Kivra.Sweden@example.com"
        subject:
          description: |
            The subject/title will be visibile in the Recipients Inbox.
            Keep the subject short and concise (i.e. up to 30-35 characters) to make sure that is fully visible on most screen sizes.
            Avoid using personal and sensitive information in the subject.
          type: string
          example: "Invoice for March 2022"
        generated_at:
          type: string
          format: ISO8601
          example: "2022-12-31"
          description: |
            Optional attribute which denotes when a specific Content was generated at the tenant/integrator’s site.
            The attribute will be used for sorting in the Kivra user interface, which makes it possible for a tenant or integrator to control the sorting.
        type:
          type: string
          example: "letter"
          description: |
            Optional attribute providing information about the type of content being sent.
            The type of a content may influence how the user interacts with the content and how the user is notified about the content.
            Allowed values are:
            - `"letter"`: indicating that the content is an information letter. This is the default type for all non-payable content.
            - `"letter.salary"`: indicating that the content is a salary specification.
            - `"letter.creditnotice"`: indicating that the content is a creditnotice.
            - `"invoice"`: |
              indicating that the content is an invoice. A valid "payment" object needs to be provided and the "payable" attribute must be set to true.
              This is the default type for all payable content.
            - `"letter.form"`: indicating that the content contains a form.
            - `"invoice.reminder"`: |
              indicating that the content is an invoice, a reminder for a previously unpaid invoice.
              The invoice might include late fees and other differences compared to the original invoice.
              A valid "payment" object needs to be provided and the "payable" attribute must be set to true.
            - `"invoice.debtcampaign"`: |
              indicating that the content is an invoice or payment plan from a debt collection company.
              The invoice might include fees such as interest and reminder fees. A valid "payment" object needs to be provided and the "payable" attribute must be set to "true".
              This content types enables long due dates with a longer notification scheme
            - `"invoice.renewal"`: |
              indicating that the content is not a real invoice, but an offer that is voluntary to pay for the receiver.
              It can be used to send an offer to renew a subscription, insurance or similar. A valid "payment" object needs to be provided and the "payable" attribute must be set to true.
            - `"booking"`: indicating that the content is a booking/appointement.
        retain:
          description: |
            Boolean denoting if Kivra should try and retain this Content if it can’t be delivered. Default `false`.
            Please note that retain must never be set to `true` for payable content.
          type: boolean
          writeOnly: true
          example: false
        retention_time:
          description: |
            How long to retain a Content. Supported values: `"30"` and `"390"`
          type: string
          writeOnly: true
          example: "30"
          enum: ["30", "390"]
        parts:
          description: Array of file Objects
          type: array
          writeOnly: true
          items:
            $ref: "#/components/schemas/Parts_Responsive"
        payment:
          type: object
          description: Optionally specify invoice information, please notice that you cannot have both payment and payment_multiple_options in the same payload
          $ref: "#/components/schemas/Payment"
        payment_multiple_options:
          type: object
          description: Optionally specify multiple payment options, please notice that you cannot have both payment and payment_multiple_options in the same payload
          $ref: "#/components/schemas/PaymentMultipleOptions"
        booking:
          description: Optionally specify booking information
          $ref: "#/components/schemas/Booking"
        form:
          description: Optionally attach a form
          $ref: "#/components/schemas/Form"
        campaign:
          description: Optionally attach a campaign
          $ref: "#/components/schemas/Campaign"


    # ##############################################
    # SCHEMA Form Template
    # ##############################################
    FormTemplate:
      type: object
      required:
        - title
        - description
        - fields
        - form_template_key
        - tenant_key
        - created_at
      properties:
        title:
          type: string
          description: |
            The title of the form.
          example: Customer KYC
        description:
          type: string
          description: |
            The purpose of the form.
          example: Your bank has some questions
        fields:
          type: array
          description: |
            The questions that you want to ask the user.
          items:
            $ref: "#/components/schemas/FormField"
          example:
            - label: How many times per month do you deposit into your account?
              name: number_deposits
              type: number
            - label: What is the largest amount deposited?
              name: largest_sum
              type: options
              values:
                - id: small
                  label: 10000 - 20000
                - id: medium
                  label: 20000 - 30000
                - id: large
                  label: 30000 - 40000
            - label: Do you have any further comments?
              name: comments
              type: free_text
              help_text: This can be any type of feedback that you have.
        form_template_key:
          type: string
          format: uuid
          description: |
            The id of the newly created form template.
          readOnly: true
          example: "2877d684-a340-4e4c-867f-d93283787b01"
        tenant_key:
          type: string
          format: hexadecimal
          description: |
            The tenant key of the tenant that created the form template.
          readOnly: true
          example: "1341543157b3a8c66f220b2164b2e13789d2d04015"
        created_at:
          type: string
          description: |
            The date the form template was created.
          readOnly: true
          example: "2022-11-23T14:51:23.874434Z"
    FormField:
      type: object
      required:
        - type
        - label
        - name
      properties:
        type:
          type: string
          enum: [free_text, number, options]
          description: |
            The input type required to answer the question.

            `free_text` is a string.

            `number` is an integer or a floating point number.

            `options` is a string that has a finite amount of values e.g. yes or no question.
        label:
          type: string
          description: |
            Human readable description of what the question is.
        name:
          type: string
          description: |
            A key used to identify the question.
        help_text:
          type: string
          description: |
            Provides the user with more information about the question.
        values:
          type: array
          description: |
            When `type` is `options` then use this to specify the answers that the user can select.
          items:
            $ref: "#/components/schemas/FormOption"
    FormOption:
      type: object
      required:
        - id
        - label
      properties:
        id:
          type: string
          description: |
            A key used to identify the answer.
        label:
          type: string
          description: |
            A human readable description of the answer.
    FormTemplateKey:
      type: object
      required:
        - form_template_key
      properties:
        form_template_key:
          type: string
          description: |
            A key used to identify the form template.
          example:
            2877d684-a340-4e4c-867f-d93283787b01

    # ##############################################
    # SCHEMA Form Response
    # ##############################################
    FormResponseKeys:
      type: object
      required:
        - form_template_key
        - responses
      properties:
        form_template_key:
          type: string
          format: uuid
          description: |
            The form template key associated with the form responses.
          example:
            2877d684-a340-4e4c-867f-d93283787b01
        responses:
          type: array
          description: |
            Metadata about the form response
          items:
            type: object
            properties:
              form_response_key:
                type: string
                format: uuid
                description: |
                  A key used to identify the individual form response.
                example:
                  bed773d7-9029-42f2-9f0b-0729390c962c
    FormResponse:
      type: object
      required:
        - form_response_key
        - form_template_key
        - responses
        - matched_by
        - login_method
        - responded_at
        - sender_reference
      properties:
        form_response_key:
          type: string
          format: uuid
          description:
              The form response key
          example:
            2877d684-a340-4e4c-867f-d93283787b01
        form_template_key:
          type: string
          format: uuid
          description:
             The form template key.
          example:
            2877d684-a340-4e4c-867f-d93283787b01
        responses:
          type: object
          description:
            The form response that the user submitted.
          required:
            - name
            - value
            - type
          properties:
            name:
              type: string
              description: |
                A key used to identify the question.
            value:
              type: object
              additionalProperties:
                oneOf:
                  - type: string
                  - type: number
              description: |
                The response to the question.
            type:
              type: string
              enum: [free_text, number, options]
              description: |
                The input type required to answer the question.

                `free_text` is a string.

                `number` is an integer or a floating point number.

                `options` is a string that has a finite amount of values e.g. yes or no question.
          example:
             - name: number_deposits
               value: 1
               type: number
             - name: largest_sum
               value: small
               type: options
             - name: comments
               value: No further comments
               type: free_text
        matched_by:
          type: object
          description:
            Used to identify the user that answered the form
          required:
            - type
            - value
          properties:
            type:
              type: string
              enum: [ssn, email]
              description:
                How the user that answered the form was identified.
              example: ssn
            value:
              type: string
              description:
                Represents a value used to identify a user e.g. ssn or email.
              example: 199202286837
        login_method:
          type: string
          enum: [bankid]
          description:
                How the user that submitted the form logged into Kivra
          example: bankid
        responded_at:
          type: string
          format: ISO8601
          description:
                When Kivra received a response to the form
          example: 2023-08-22T12:39:29.000000Z
        sender_reference:
          type: object
          nullable: true
          description: Provided reference data in content sendout is included in the form response.
          example:
            internal_id: "6eb7d1b9-ccd6-408f-ade7-9a1837be3ecf"
    BasicErrorResponse:
      type: object
      required:
        - code
        - short_message
        - long_message
      properties:
        code:
          type: integer
          description: An error code identifying the reason of the unsuccessful request.
        short_message:
          type: string
          description: Short human-readable description.
        long_message:
          type: string
          description: Longer human-readable description getting into details.
    FormErrorResponse:
      allOf:
        - $ref: "#/components/schemas/BasicErrorResponse"
        - type: object


    # ##############################################
    # SCHEMA Content_company
    # ##############################################
    Content_company:
      type: object
      required:
        - vat_number
      properties:
        vat_number:
          description: |
            A valid VAT-identifier, Swedish format: `SE[xxxxxxxxxx]01`
          type: string
          writeOnly: true
          example: SE556840226601
        subject:
          description: This Subject/Title will be visibile in the Recipients Inbox.
          type: string
          example: "Sample Invoice"
        generated_at:
          type: string
          format: ISO8601
          example: "2016-12-12"
          description: |
            Optional attribute which denotes when a specific Content was generated at the tenant/integrator’s site. The attribute will be used for sorting in the Kivra user interface, which makes it possible for a tenant or integrator to control the sorting.
        type:
          type: string
          example: "letter"
          description: |
            Optional attribute providing information about the type of content being sent. The type of a content may influence how the user interacts with the content and how the user is notified about the content.
              Allowed values are:
              - `"letter"`: indicating that the content is an information letter. This is the default type for all non-payable content.
              - `"invoice"`: indicating that the content contains payment information. This value can only be used when a "payment" object is provided and the "payable" attribute is set to true. This is the default type for all payable content.
              - `"letter.salary"`: indicating that the content is a salary specification.
              - `"letter.creditnotice"`: indicating that the content is a creditnotice.
        files:
          description: Array of file Objects
          type: array
          writeOnly: true
          items:
            $ref: "#/components/schemas/File"
        context:
          type: object
          writeOnly: true
          description: Optionally specify additional information
          properties:
            invoice:
              type: object
              description: Optionally specify invoice information
              properties:
                payment:
                  $ref: "#/components/schemas/Payment"
                invoice_reference:
                  type: string
                  description: Tenant’s own Invoice Reference
                  example: "Invoice Nr #123"

    # ##############################################
    # SCHEMA Payment
    # ##############################################
    Payment:
      type: object
      description: Optionally specify payment information
      required:
        - payable
        - currency
        - due_date
        - total_owed
        - type
        - method
        - account
        - reference
      properties:
        payable:
          type: boolean
          description: Toggles whether this content should be payable through Kivra’s payment platform
        status:
          type: string
          description: "Toggles whether this content is paid or unpaid: if already paid the user can’t pay it again through Kivra"
          default: "unpaid"
          readOnly: true
          enum: ["paid", "unpaid"]
        currency:
          type: string
          enum:
            - SEK
          example: "SEK"
          description: |
            Currency used in specifying `total_owed`. In Sweden, only SEK is accepted.
        due_date:
          type: string
          format: ISO8601
          example: "2017-01-01"
          description: Date when this Invoice is due
        total_owed:
          type: string
          format: float
          example: "123.50"
          description: The total amount owed according to the invoice. **If `payable` equals `true` this must be a non negative number that’s greater than "0"**
        type:
          type: string
          description: Type of format for the reference
          example: "SE_OCR"
          enum: ["SE_OCR", "TENANT_REF"]
        method:
          type: string
          description: 1 = BG and 2 = PG
          example: "1"
          enum: ["1", "2"]
        account:
          type: string
          example: "12345"
          description: Tenant’s account number
        reference:
          type: string
          example: "426523791"
          description: The reference number used for paying. This can be maximum 25 characters long
        variable_amount:
          type: boolean
          default: false
          description: Toggles whether the user may choose to pay only a portion of the total_owed amount or whether the user must always pay the complete total_owed amount
        min_amount:
          type: string
          format: float
          example: "50.00"
          description: The minimum amount that can be paid when `variable_amount` equals `true`. Note that this is a soft limit, so whenever `variable_amount` is `true` the user will be able to choose freely the amount to be paid, but it may be warned if the amount paid is inferior to `min_amount`. `min_amount` must be greater than "0" and less than "total_owed".

    # ##############################################
    # SCHEMA PaymentMultipleOptions
    # ##############################################
    PaymentMultipleOptions:
      type: object
      description: Payment information when multiple options are available. Note that the first options is special. Notifications about the invoice will be based on the due date specified in the first option, and in the case where a user looks at the invoice in a client that does not know about multiple options, the first one will be the only one presented. For example, if the invoice offers the choice of paying the entire debt or to start a payment plan, the first option should be to pay the entire debt.
      required:
        - payable
        - account
        - method
        - currency
        - options
      properties:
        payable:
          type: boolean
          description: Toggles whether this content should be payable through Kivra’s payment platform. Only `true` is allowed when sending multiple payment options.
          enum: [true]
        status:
          type: string
          description: "Toggles whether this content is paid or unpaid: if already paid the user can’t pay it again through Kivra"
          default: "unpaid"
          readOnly: true
          enum: ["paid", "unpaid"]
        method:
          type: string
          description: 1 = BG and 2 = PG
          example: "1"
          enum: ["1", "2"]
        account:
          type: string
          example: "1234-5678"
          description: |
            The destination account number if the user choses to pay this
            invoice with a service that uses some variety of bank transfer (for
            example, BankGiro or PlusGiro).
        swish_alias:
          type: string
          description: |
            The Swish Payee Alias that should be used as the recipient if the
            user choses to pay this invoice with Swish. The alias given must be
            one that is listed as available for the sender, or it will be
            ignored. The value can also be the string `disable`, in order to
            override a default payee alias and disable Swish payment for this
            invoice only. This functionality will be released in Q2 2023.
        currency:
          type: string
          enum:
            - SEK
          example: "SEK"
          description: |
            Currency used in specifying `amount`. In Sweden, only SEK is allowed.
        options:
          type: array
          description: "A list of payment options, where each option should differ in either `amount` or `reference`"
          items:
            type: object
            description: "A payment option where each option should differ in either `amount` or `reference`"
            required:
              - due_date
              - amount
              - type
              - reference
            properties:
              due_date:
                type: string
                format: ISO8601
                example: "2017-01-01"
                description: Date when this option is due.
              amount:
                type: string
                format: float
                example: "123.50"
                description: The payment amount for this option. A positive number.
              type:
                type: string
                description: Type of format for the reference
                example: "SE_OCR"
                enum: ["SE_OCR", "TENANT_REF"]
              reference:
                type: string
                example: "426523791"
                description: The reference number used for paying. This can be maximum 25 characters long.
              title:
                type: string
                description: "Title for this option"
              description:
                type: string
                description: "Optional description for this option"
              icon:
                $ref: '#/components/schemas/PaymentOptionIcon'
        flexible_option:
          type: object
          description: "A flexible payment option."
          required:
            - due_date
            - type
            - reference
          properties:
            due_date:
              type: string
              format: ISO8601
              example: "2017-01-01"
              description: Date when this option is due.
            type:
              type: string
              description: Type of format for the reference
              example: "SE_OCR"
              enum: ["SE_OCR", "TENANT_REF"]
            reference:
              type: string
              example: "426523791"
              description: The reference number used for paying. This can be maximum 25 characters long.
            title:
              type: string
              description: "Title for this option"
            description:
              type: string
              description: "Optional description for this option"
            icon:
              $ref: '#/components/schemas/PaymentOptionIcon'
            min_limit:
              type: string
              format: float
              example: "123.50"
              description: The smallest allowed amount to be paid. If not given it defaults to 1.00 SEK.
            min_suggested:
              type: string
              format: float
              example: "123.50"
              description: The user is encouraged to pay more than this amount.
            max_suggested:
              type: string
              format: float
              example: "123.50"
              description: The user is encouraged to not pay more than this amount.
            max_limit:
              type: string
              format: float
              example: "123.50"
              description: The largest allowed amount to be paid. Note that even if this amount is not given or very high, limits from the payment provider or bank will still apply.


    # ##############################################
    # SCHEMA CompanyList
    # ##############################################
    CompanyList:
      type: object
      properties:
        key:
          description: Company's unique Key
          type: string
          example: "15236156848eefa1dc75364af2be38c98eb3aae223"
        vatnr:
          description: Company's unique Vat Number
          type: string
          example: "SE556840226601"

    # ##############################################
    # SCHEMA UserList
    # ##############################################
    UserList:
      type: object
      properties:
        key:
          description: This field is no longer used
          type: string
          example: ""
        ssn:
          description: User's unique SSN in the form `YYYYMMDDnnnn`
          type: string
          example: "191212121212"

    # ##############################################
    # SCHEMA UserDiff
    # ##############################################
    UserDiff:
      type: object
      properties:
        added:
          type: array
          description: List of added users
          items:
            $ref: "#/components/schemas/UserList"
        removed:
          type: array
          description: List of removed users
          items:
            $ref: "#/components/schemas/UserList"

    # ##############################################
    # SCHEMA UserMatch
    # ##############################################
    UserMatch:
      required:
        - ssns
      type: object
      properties:
        ssns:
          type: array
          items:
            type: string
            example:
              - "191212121212"
              - "197701032380"
              - "198112172385"
          description: list of SSNs to be matched
      example:
        ssns:
          - "191212121212"
          - "197701032380"
          - "198112172385"

    # ##############################################
    # SCHEMA V2 UserMatch
    # ##############################################
    UserMatchV2SSN:
      required:
        - list
      type: object
      properties:
        list:
          type: array
          items:
            type: string
            example:
              - "191212121212"
              - "197701032380"
              - "198112172385"
          description: list of recipient addresses to be matched
      example:
        list:
          - "191212121212"
          - "197701032380"
          - "198112172385"

    UserMatchV2Email:
      required:
        - list
      type: object
      properties:
        list:
          type: array
          items:
            type: string
            example:
              - "fOO@example.com"
              - "bAr@EXAMPLE.COM"
          description: list of recipient addresses to be matched
      example:
        list:
          - "fOO@example.com"
          - "bAr@EXAMPLE.COM"

    # ##############################################
    # SCHEMA CompanyMatch
    # ##############################################
    CompanyMatch:
      required:
        - vat_numbers
      type: object
      properties:
        vat_numbers:
          type: array
          items:
            type: string
            example:
              - "SE25555555550"
              - "SE25555555551"
              - "SE25555555552"
          description: list of VAT Numbers
      example:
        vat_numbers:
          - "SE25555555550"
          - "SE25555555551"
          - "SE25555555552"

    # ##############################################
    # SCHEMA Tenant_v2
    # ##############################################
    Tenant_v2:
      type: object
      required:
        - name
        - company_id
      properties:
        name:
          description: Name of the Tenant, this name shows up in the Users Inbox
          type: string
          example: "Kivra"
        company_id:
          type: array
          items:
            $ref: "#/components/schemas/CompanyId"
        edit_security_level:
          description: Security level needed for an enduser to `opt_out` from this Tenant
          type: integer
          readOnly: true
          example: 50
          enum: [25, 50]
        groups:
          type: array
          items:
            type: string
          readOnly: true
          description: List of groups this Tenant belongs to
          example: []
        visibility:
          description: Determines if this Tenant is visible for the enduser
          type: string
          readOnly: true
          enum: [visible, hidden]
        created_at:
          description: Datum when the tenant was created in UTC format
          type: string
          readOnly: true
          example: "2019-05-20T12:42:29Z"
        created_by:
          description: ID of client that created the tenant
          type: string
          readOnly: true
          example: "client_15063298495eafd2749bb78e2f991af3ab023d13df"
        status:
          description: internal field describing whether the user can opt-out the tenant
          type: string
          readOnly: true
          example: "optional"
        class:
          description: internal field
          type: string
          readOnly: true
          example: "opt_out"

    # ##############################################
    # SCHEMA Error40915
    # ##############################################
    Error40915:
      type: object
      properties:
        code:
          type: string
          description: The 5-digits error code
          example: 40915
        short_message:
          type: string
          description: A short message explaining the conflict
          example: Orgnumber already exist
        long_message:
          type: string
          description: A text message explaining the conflict
          example: "One or more of the organisation numbers within the company_id's you provided, already exist in existing tenants. Tenants outside your scope: {Name: TestBolag, Tenant key: 1424780396902ee9278b16417f8e3252c3ced28c38, Organisation number: SE556840226601}"

    # ##############################################
    # SCHEMA Error40045
    # ##############################################
    Error40045:
      type: object
      properties:
        code:
          type: string
          description: The 5-digits error code
          example: 40045
        short_message:
          type: string
          description: A short message explaining the error
          example: PDF was invalid
        long_message:
          type: string
          description: A text message explaining the error
          example: The supplied agreement PDF was invalid. Please check that the file is a valid PDF

    # ##############################################
    # SCHEMA RequestAccess
    # ##############################################
    RequestAccess:
      type: object
      properties:
        created_at:
          description: Datum when the request was created in UTC format
          type: string
          readOnly: true
          example: "2019-05-20T12:42:29Z"
        created_by:
          description: ID of client that created the request
          type: string
          readOnly: true
          example: "client_15063298495eafd2749bb78e2f991af3ab023d13df"
        status:
          description: internal field describing whether the user can opt-out the tenant
          type: string
          readOnly: true
          example: "pending"
        client_id:
          description: ID Of You the Client
        client_name:
          description: Name of the client who created the requested tenant
          type: string
          readOnly: true
          example: "Client XYZ"
        tenant_name:
          description: Name of the requested tenant
          type: string
          readOnly: true
          example: "Tenant ABC"
        tenant_key:
          description: Key of the requested tenant
          type: string
          readOnly: true
          example: "1424780396902ee9278b16417f8e3252c3ced28c38"

    # ##############################################
    # SCHEMA Agreement
    # ##############################################
    Agreement:
      type: object
      required:
        - subject
        - type
        - original
        - parties
      properties:
        subject:
          description: Name of the agreement
          type: string
          example: "Employment agreement"
        type:
          description: the type of content, for agreements always use 'agreement'
          type: string
          example: "agreement"
        vat_number:
          description: |
            A valid VAT-identifier, Swedish format: `SE[xxxxxxxxxx]01`
          type: string
          example: SE556840226601
        original:
          type: object
          properties:
            name:
              description: Name of the document file
              type: string
              example: "agreement1025.pdf"
            content_type:
              description: The [IANA](http://www.iana.org/assignments/media-types/media-types.xhtml) media type corresponding to the file, e.g. "application/pdf"
              type: string
              example: "application/pdf"
            data:
              description: Base64-encoded data for the agreement PDF
              type: string
              format: "Base64-encoded data"
              example: REVBREJFRUY=
        parties:
          description: list of signers and delegates that are requested to sign the agreement
          type: array
          items:
            $ref: "#/components/schemas/AgreementParties"
          example:
            - ssn: "197701032380"
              name: "Jan-Erik Karlsson"
              email: "je.karlsson@email.nu"
              role: "signer"
            - ssn: "198112172385"
              name: "Gustav Larsson"
              email: "gustav123@mymail.com"
              role: "delegate"

    # ##############################################
    # SCHEMA AgreementParties
    # ##############################################
    AgreementParties:
      type: object
      properties:
        ssn:
          description: |
            User's unique SSN, format: `YYYYMMDDnnnn`
          type: string
          example: "197701032380"
        name:
          description: Name of the user
          type: string
          example: "Jan-Erik Karlsson"
        email:
          description: email to be used to contact the user
          type: string
          example: "je.karlsson.hem@email.nu"
        role:
          description: the role of the user in this signature flow
          type: string
          enum: ["signer", "delegate"]
          example: "signer"

    # ##############################################
    # SCHEMA AgreementStateShort
    # ##############################################
    AgreementStateShort:
      type: object
      properties:
        key:
          description: unique agreement id
          type: string
          example: "1544707148d73a3e84a216427724637fc207cba2ab"
        state:
          description: current state for the agreement
          type: string
          example: "active"
          enum: [active, generating, completed, revoked]
          readOnly: true

    # ##############################################
    # SCHEMA AgreementStateDetailed
    # ##############################################
    AgreementStateDetailed:
      type: object
      properties:
        subject:
          description: Name of the agreement
          type: string
          example: "Employment agreement"
        created_at:
          description: The time when the agreement was created
          type: string
          example: "2019-04-09T13:42:26Z"
          readOnly: true
        expires_at:
          description: |
            The expiration time for the agreement, if the agreement is not completed before this date, it will no longer be available for signature
          type: string
          example: "2019-05-09T13:42:26Z"
          readOnly: true
        state:
          description: The current state of the agreement
          type: string
          example: completed
          enum: [active, generating, completed, revoked]
          readOnly: true
        tenant_name:
          description: The name of the tenant that created the agreement
          type: string
          example: "Sender AB"
        tenant:
          description: The tenant key that created the agreement
          type: string
          example: "tenant_154442474745511bbaaa5b44b391eae0513e2c55a0"
        type:
          description: The type of agreement as provided by the sender when the agreement was created
          type: string
          example: "agreement"
        signatures:
          description: |
            List of signatures
          type: array
          readOnly: true
          items:
            $ref: "#/components/schemas/AgreementSignature"
          example:
            - ssn: "197701032380"
              real_name: "Jan-Erik Karlsson"
              created_at: "2019-04-12T08:23:29Z"
              order_ref: "d4ace777-6b91-4172-903e-39371ede89f1"
            - ssn: "198112172385"
              real_name: "Gustav Johan Larsson"
              created_at: "2019-04-11T18:53:03Z"
              order_ref: "f5bce777-0b42-4222-1f3e-ab523ede7a5f"
        parties:
          description: list of signers and delegates that are requested to sign the agreement
          type: array
          items:
            $ref: "#/components/schemas/AgreementParties"
          example:
            - ssn: "197701032380"
              name: "Jan-Erik Karlsson"
              email: "je.karlsson.hem@email.nu"
              role: "signer"
            - ssn: "198112172385"
              name: "Gustav Larsson"
              email: "gustav123@mymail.com"
              role: "delegate"

    # ##############################################
    # SCHEMA AgreementSignature
    # ##############################################
    AgreementSignature:
      type: object
      properties:
        ssn:
          description: |
            Signer's unique SSN, format: `YYYYMMDDnnnn`
          type: string
          example: "191212121212"
        real_name:
          description: The real name of the signer, as provided by Mobile BankID service
          type: string
          example: "Jan-Erik Karlsson"
        created_at:
          description: The time when the signature was created
          type: string
          example: "2019-04-12T08:23:29Z"
        order_ref:
          description: The unique ID of the signature
          type: string
          example: "d4ace777-6b91-4172-903e-39371ede89f1"

    # ##############################################
    # SCHEMA CompanyId
    # ##############################################
    CompanyId:
      type: object
      required:
        - name
        - orgnr
      properties:
        name:
          description: Legal name of Company
          type: string
          example: "Kivra AB"
        orgnr:
          description: Vat number of Company
          type: string
          example: "SE556840226601"

    # ##############################################
    # SCHEMA File
    # ##############################################
    File:
      type: object
      required:
        - name
        - data
        - content_type
      properties:
        name:
          description: Arbritrary file-name that is shown alongside the File in the Kivra GUI
          type: string
          example: filename.pdf
        data:
          description: Base64-encoded data
          type: string
          format: "Base64-encoded data"
          example: REVBREJFRUY=
        content_type:
          description: The [IANA](http://www.iana.org/assignments/media-types/media-types.xhtml) media type corresponding to the file, e.g. "application/pdf"
          type: string
          example: "application/pdf"

    # ##############################################
    # SCHEMA Parts_Responsive
    # ##############################################
    Parts_Responsive:
      type: object
      required:
        - name
        - data
        - content_type
      properties:
        name:
          description: Arbritrary file-name
          type: string
          example: document.pdf
        data:
          description: Base64-encoded data for the PDF content
          type: string
          format: "Base64-encoded data"
          example: REVBREJFRUY=
        content_type:
          description: The [IANA](http://www.iana.org/assignments/media-types/media-types.xhtml) media type for PDF files "application/pdf"
          type: string
          example: "application/pdf"
        responsive_part:
          type: object
          required:
            - name
            - data
            - content_type
          properties:
            name:
              description: Arbritrary file-name
              type: string
              example: document.html
            data:
              description: Base64-encoded data for the HTML document
              type: string
              format: "Base64-encoded HTML data"
              example: PGgxPmNvbnRlbnQgMTwvaDE+CjxwPmNvbnRlbnQgMTwvcD4=
            content_type:
              description: The [IANA](http://www.iana.org/assignments/media-types/media-types.xhtml) media type for HTML content "text/html"
              type: string
              example: "text/html"

    # ##############################################
    # SCHEMA Icon
    # ##############################################
    Icon:
      type: object
      required:
        - data
        - content_type
      properties:
        name:
          description: Arbitrary filename
          type: string
          example: filename.pdf
        data:
          description: >
            Base64-encoded data. Max size is 134 kB when encoded which is roughly equivalent to
            100 kB before encoding. The image format must be PNG.
            The image must be quadratic (that is, width and height
            must be the same). The sides must be at least 256
            pixels long, and at most 512 pixels long. The image
            must have an alpha channel.
          type: string
          format: "Base64-encoded data"
          example: REVBREJFRUY=
        content_type:
          description: The [IANA](http://www.iana.org/assignments/media-types/media-types.xhtml) media type corresponding to the file, e.g. "image/png"
          type: string
          enum: ["image/png"]
          example: "image/png"

    # ##############################################
    # SCHEMA TenantIcon
    # ##############################################
    TenantIcon:
      allOf:
        - $ref: "#/components/schemas/Icon"
        - type: object
          properties:
            data:
              description: Base64-encoded data
              type: string
              format: "Base64-encoded data"
              example: REVBREJFRUY=

    # ##############################################
    # SCHEMA PaymentOptionIcon
    # ##############################################
    PaymentOptionIcon:
      allOf:
        - $ref: "#/components/schemas/Icon"
        - type: object
          properties:
            data:
              # TODO: Actually decide max before merging this PR
              description: This string is ignored by the documentation system
              type: string
              example: REVBREJFRUY=

    # ##############################################
    # SCHEMA CompanyInbox
    # ##############################################
    CompanyInbox:
      type: object
      properties:
        key:
          description: Content's unique key
          type: string
          example: "15294092505b9cfab3f79d233f8eca6fbc5385fa61"
        sender:
          description: Unique key for the tenant that posted the content
          type: string
          example: "1341573157b3a133f220f4217b2e32989d2efa015"
        sender_name:
          description: Name of the tenant that posted the content
          type: string
          example: "Kivra"
        created_at:
          description: Date and time when the content was delivered to the recipient
          type: string
          example: "2018-06-19T11:54:10Z"
        subject:
          description: Subject of the content, as set by the sender
          type: string
          example: "Invoice 4512 from Local Bank"
        status:
          description: Whether the content has been read (opened) or not
          type: string
          enum: ["read", "unread"]
          example: "read"

    # ##############################################
    # SCHEMA CompanyContent
    # ##############################################
    CompanyContent:
      type: object
      properties:
        sender:
          description: Unique key for the tenant that posted the content
          type: string
          example: "1341573157b3a133f220f4217b2e32989d2efa015"
        sender_name:
          description: Name of the tenant that posted the content
          type: string
          example: "Kivra"
        created_at:
          description: Date and time when the content was delivered to the recipient
          type: string
          example: "2018-06-19T11:54:10Z"
        subject:
          description: Subject of the content, as set by the sender
          type: string
          example: "Invoice 4512 from Local Bank"
        receiver_name:
          description: Name of the company that received the content
          type: string
          example: "Digital Hero AB"
        payment:
          $ref: "#/components/schemas/Payment"
        parts:
          description: files composing the content
          type: array
          items:
            $ref: "#/components/schemas/Parts"

    # ##############################################
    # SCHEMA Booking
    # ##############################################
    Booking:
      type: object
      required:
        - title
        - start_time
      properties:
        title:
          description: |
            Booking name that is used when creating a post in an external calendar. Note! Don’t include any sensitive information here.
          type: string
          example: "Kontroll av tandhälsa"
        start_time:
          description: |
            Date and time for the booking to start. Must be in the future. If the time zone is not stated it will be set to UTC.
          type: string
          format: ISO8601
          example: "2028-06-19T11:00:00Z"
        end_time:
          description: |
            Date and time for the booking to end. If present must be after start_time. If the time zone is not stated it will be set to UTC.
          type: string
          format: ISO8601
          example: "2028-06-19T12:00:00Z"
        location:
          description: Location for the appointment/booking. Address must contain city for full functionality.
          type: string
          example: "Strandvägen 61, Stockholm"
        description:
          description: |
            Additional information. Note! Don’t include any sensitive information here.
          type: string
          example: "Brush your teeth before coming"
        info_url:
          description: Link to page with additional information
          type: string
          format: uri

    # ##############################################
    # SCHEMA Form
    # ##############################################
    Form:
      required:
        - id
        - days_to_expiry
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The form template key
          example: 2877d684-a340-4e4c-867f-d93283787b01
        sender_reference:
          type: object
          description: Reference data you want to include in the form response.
          example:
            internal_id: "6eb7d1b9-ccd6-408f-ade7-9a1837be3ecf"
        days_to_expiry:
          type: integer
          minimum: 1
          maximum: 90
          description: >
            Number of days in which a response to the form can be submitted
            (until 23:59:59).

            As an *example*, if *the content is sent* on September 8th,
            and the form expires in 30 days, it will effectively expire
            on October 7th 23:59:59.
          example: 30

    # ##############################################
    # SCHEMA Campaign
    # ##############################################
    Campaign:
      type: object
      description: This is BETA and only available in Sandbox. As such this may change.
      required:
        - tag
      properties:
        tag:
          type: string
          description: The tag that refers to the campaign that you want to attach. Note that the request will still be processed even if the campaign does not exist.
          example: summer_2023

    # ##############################################
    # SCHEMA Parts
    # ##############################################
    Parts:
      type: object
      properties:
        content_type:
          type: string
          description: The IANA media type corresponding to the file, e.g. "application/pdf"
          example: "application/pdf"
        checksum:
          type: string
          description: The cheksum of the document calculated with md5
          example: "9209c7eebdd283a4c4bd7555e73e6064"
        sha256:
          type: string
          description: hash of the document calculated with SHA-256
          example: "287f2fe67a8a76a10169aa6a885d21e1f83416c4831294ea5c4b0a38bda5c78d"
        size:
          type: integer
          description: size of the document in bytes
          example: 163414
        body:
          type: string
          description: body of the content (present only if content_type is "text/html" or "text/plain")
          example: "<!doctype html>\n<html class=\"...."
        key:
          type: string
          description: |
            The unique key for the content file (present for all content that is not "text/html" or "text/plain")
          example: "15118724482475bf32615b4a2aaa604fd66377010e"

    # ##############################################
    # SCHEMA EmptyString
    # ##############################################
    EmptyString:
      description: The empty string
      enum:
        - ''
      type: string

    # ##############################################
    # SCHEMA CompanyKey
    # ##############################################
    CompanyKey:
      description: The key for a company
      pattern: ^[0-9]{10}[a-f0-9]{32}$
      example: 156077433683911cdca5fd4563bded979572454cb9
      type: string

    # ##############################################
    # SCHEMA ContentKey
    # ##############################################
    ContentKey:
      description: The key for a content
      pattern: ^[0-9]{10}[a-f0-9]{32}$
      example: 156077433683911cdca5fd4563bded979572454cb9
      type: string

    # ##############################################
    # SCHEMA CompanyType
    # ##############################################
    CompanyType:
      description: |
        The company's/organisation's type

        This is currently based on the registry holding the signatory
        information. Thus `company` really means that Bolagsverket is the
        registry and includes Ekonomiska föreningar as well. For
        `riksidrottsförening` it is Riksindrottsförbundet.
      example: company
      enum:
        - company
        - riksidrottsförening
      type: string

    # ##############################################
    # SCHEMA CompanyName
    # ##############################################
    CompanyName:
      description: The name of a company
      example: Cornelias Café AB
      type: string

    # ##############################################
    # SCHEMA VatNumber
    # ##############################################
    VatNumber:
      pattern: ^[A-Z]{2}[0-9]{10}[0-9]{2}$
      description: |
        The VAT number of the company.

        It follows this format:
        Land code - Organisation number - Serial number
      example: SE556000475501
      type: string

    # ##############################################
    # SCHEMA IncomingEmail
    # ##############################################
    IncomingEmail:
      pattern: ^[a-tv-zA-TV-Z0-9]{9}@(sandbox\.)?kivramail.com$
      description: Email address for receiving emails as content
      type: string
      example: xxcsn2psy@kivramail.com

    # ##############################################
    # SCHEMA ScanningAddress
    # ##############################################
    ScanningAddress:
      description: Postal address for receiving physical mail as scanned content in Kivra.
      nullable: true
      additionalProperties: false
      properties:
        name:
          $ref: '#/components/schemas/CompanyName'
        street:
          description: |
            A special "street" that allows the scanning facility to send to the correct company.

            It's on the format "Kivra: <organisation number>"
          type: string
          example: 'Kivra: 556000-4755'
        postal_code:
          description: |
            The special postal code that goes to Kivra's scanning facility
          example: 106 31
          enum:
            - 106 31
          type: string
        city:
          description: The "city" for Kivra's scanning facility
          example: Stockholm
          enum:
            - Stockholm
          type: string
        country:
          description: The country for Kivra's scanning facility
          example: SE
          enum:
            - SE
          type: string
      required:
        - name
        - street
        - postal_code
        - city
        - country
      type: object

    # ##############################################
    # SCHEMA ScanningFallbackAddress
    # ##############################################
    ScanningFallbackAddress:
      description: If a mailpiece cannot be scanned, it will be forwarded to this address instead.
      nullable: true
      additionalProperties: false
      properties:
        name:
          description: Name of the recipient (a company or person).
          type: string
          example: 'Cornelias Café AB'
        street:
          description: Name of the street, including street number.
          type: string
          example: 'Klara Norra kyrkogata 33'
        postal_code:
          description: Postal code.
          example: '11122'
          type: string
        city:
          description: Name of the city.
          example: 'Stockholm'
          type: string
        country:
          description: Name of the country.
          example: 'Sverige'
          type: string
        care_of:
          description: Address care of (c/o).
          example: ''
          type: string
      required:
        - name
        - street
        - postal_code
        - city
        - country
        - care_of
      type: object

    # ##############################################
    # SCHEMA AllServices
    # ##############################################
    AllServices:
      description: |
        The status of each Kivra Business and Kivra Business Plus service
        for the company.
      additionalProperties: false
      properties:
        email:
          description: Indicates if the Kivra email service is active
          example: false
          type: boolean
        scanning:
          description: Indicates if the scanned mail service is active
          example: false
          type: boolean
        interpreter:
          description: Indicates if the interpreter service is active
          example: false
          type: boolean
        kivra:
          description: Indicates that the Kivra digital mail service is active (always true)
          example: true
          enum:
            - true
          type: boolean
        minameddelanden:
          description: |
            Indicates if the Kivra public authority mail service is active.
          example: true
          type: boolean
      type: object

    # ##############################################
    # SCHEMA FieldQueryParameter
    # ##############################################
    FieldQueryParameter:
      description: The field(s) to respond with
      example: key
      type: string

    # ##############################################
    # SCHEMA BaseCompany
    # ##############################################
    BaseCompany:
      description: A company object with basic fields only
      additionalProperties: false
      properties:
        key:
          $ref: '#/components/schemas/CompanyKey'
        name:
          $ref: '#/components/schemas/CompanyName'
        type:
          $ref: '#/components/schemas/CompanyType'
        vat_number:
          $ref: '#/components/schemas/VatNumber'
      type: object

    # ##############################################
    # SCHEMA FullCompany
    # ##############################################
    FullCompany:
      description: A company object.
      additionalProperties: false
      properties:
        key:
          $ref: '#/components/schemas/CompanyKey'
        scanning_address:
          $ref: '#/components/schemas/ScanningAddress'
        scanning_fallback_address:
          $ref: '#/components/schemas/ScanningFallbackAddress'
        created_at:
          description: When the company started to onboard.
          example: '2019-02-26T14:47:26Z'
          type: string
          format: date-time
        email:
          description: |
            Email address for receiving emails as content.
            Empty if the Kivra email service is not active.
          oneOf:
            - $ref: '#/components/schemas/IncomingEmail'
            - $ref: '#/components/schemas/EmptyString'
        name:
          $ref: '#/components/schemas/CompanyName'
        type:
          $ref: '#/components/schemas/CompanyType'
        services:
          $ref: '#/components/schemas/AllServices'
        vat_number:
          $ref: '#/components/schemas/VatNumber'
      required:
        - key
      type: object

    # ##############################################
    # SCHEMA GovernmentalLabel
    # ##############################################
    GovernmentalLabel:
      description: |
        Indicates if the content comes from a governmental body.
      type: boolean

    # ##############################################
    # SCHEMA HandledLabel
    # ##############################################
    HandledLabel:
      description: |
        The content has been marked as `handled`, previously known as `paid`.
      type: boolean

    # ##############################################
    # SCHEMA InterpretedLabel
    # ##############################################
    InterpretedLabel:
      description: |
        Indicates if the content has been interpreted.
      type: boolean

    # ##############################################
    # SCHEMA ReminderLabel
    # ##############################################
    ReminderLabel:
      description: |
        Indicates if the content, which must be an invoice, is a reminder.
      type: boolean

    # ##############################################
    # SCHEMA TrashedLabel
    # ##############################################
    TrashedLabel:
      description: |
        Indicates if the content has been moved to the trash.
      type: boolean

    # ##############################################
    # SCHEMA ViewedLabel
    # ##############################################
    ViewedLabel:
      description: |
        The content has been viewed. This can be toggled by the user, i.e. "Mark
        as unread".
      type: boolean

    # ##############################################
    # SCHEMA InterpretedFields
    # ##############################################
    InterpretedFields:
      description: |
        Key paths (dot-notation) identifying fields whose values came from the interpreter.
        The paths are relative to the root of the object.
      type: array
      items:
        type: string
      example: ["labels.reminder", "sender_vat_numbers", "type"]

    # ##############################################
    # SCHEMA PartnerPaymentOption
    # ##############################################
    PartnerPaymentOption:
      description: One way to pay this invoice
      additionalProperties: false
      properties:
        account:
          description: The account to pay to
          example: '12345678'
          type: string
          nullable: true
        amount:
          minimum: 0
          description: The amount to pay in öre, or equivalent
          example: 150000
          type: integer
          nullable: true
        currency:
          description: The currency used for this payment option
          example: SEK
          type: string
          nullable: true
        description:
          description: The description of this payment option
          example: 12 month subscription
          type: string
          nullable: true
        due_at:
          description: Due date of this payment option
          example: '2022-03-30T00:00:00Z'
          type: string
          format: date-time
          nullable: true
        interpreted:
          description: True if and only if this payment option was interpreted
          example: true
          type: boolean
        reference:
          description: |
            The payments reference, could be an OCR number or invoice reference
          example: 987654321
          type: string
          nullable: true
        reference_type:
          description: The type of reference
          example: OCR
          type: string
          nullable: true
        type:
          description: The type of the the payment, aka the type of the account
          example: bankgiro
          type: string
          nullable: true
        vat_amount:
          description: The VAT in öre for this invoice, if available
          example: 1500
          type: integer
          nullable: true
      required:
        - account
        - amount
        - currency
        - description
        - due_at
        - interpreted
        - reference
        - reference_type
        - type
        - vat_amount
      type: object

    # ##############################################
    # SCHEMA InvoiceReferences
    # ##############################################
    InvoiceReferences:
      description: References for this invoice
      additionalProperties: false
      nullable: true
      properties:
        our:
          description: Our reference, "vår referens" in Swedish
          type: string
          nullable: true
          example: "Gustav Larsson"
        your:
          description: Your reference, "er referens" in Swedish
          type: string
          nullable: true
          example: null
      required:
        - our
        - your
      type: object

    # ##############################################
    # SCHEMA PartQueryParameter
    # ##############################################
    PartQueryParameter:
      minimum: 1
      description: The content part to retrive, 1-indexed
      type: integer

    # ##############################################
    # SCHEMA PartMetadata
    # ##############################################
    PartMetadata:
      additionalProperties: false
      properties:
        content_type:
          description: The MIME type of this content part
          enum:
            - application/pdf
            - text/html
            - text/plain
            - image/jpeg
            - image/gif
            - image/png
            - text/calendar
            - application/msword
            - >-
              application/vnd.openxmlformats-officedocument.wordprocessingml.document
            - >-
              application/vnd.openxmlformats-officedocument.wordprocessingml.template
          type: string
        name:
          description: The name of this content part. Usually a filename.
          type: string
          example: faktura.pdf
        sha256:
          description: The SHA256 digest of this content part
          type: string
          example: 060bed374498fe2f36a5f2e1abf217a90beb46e8fe4ec1d9d5ce7746
        size:
          minimum: 0
          description: The size in bytes of this content part
          type: integer
          example: 4711
        url:
          description: The URL to fetch this content part
          type: string
          example: "https://sender.sandbox-api.kivra.com/v3/partner/company/1691677086a57b73569d594df5abad7fd2575c1070/content/1691677075a9813e08f783496382b0bff743ec34ae?part=1"
      required:
        - content_type
        - name
        - sha256
        - size
        - url
      type: object

    # ##############################################
    # SCHEMA ContentPart
    # ##############################################
    ContentPart:
      description: |
       The file data of the content part, `content_type` in the part metadata
       describes its file type.

    # ##############################################
    # SCHEMA BaseContentMetadata
    # ##############################################
    BaseContentMetadata:
      description: Listing summary of content metadata
      additionalProperties: false
      properties:
        created_at:
          description: |
            This is the same date and time as `transaction_at`, except for
            reminder invoices, where it is the reminder date and not the
            original invoice date.
          type: string
          format: date-time
          nullable: false
        key:
          $ref: '#/components/schemas/ContentKey'
        labels:
          description: The labels that apply to this content
          additionalProperties: false
          properties:
            governmental:
              $ref: '#/components/schemas/GovernmentalLabel'
            handled:
              $ref: '#/components/schemas/HandledLabel'
            interpreted:
              $ref: '#/components/schemas/InterpretedLabel'
            reminder:
              $ref: '#/components/schemas/ReminderLabel'
            trashed:
              $ref: '#/components/schemas/TrashedLabel'
            viewed:
              $ref: '#/components/schemas/ViewedLabel'
          required:
            - governmental
            - handled
            - interpreted
            - reminder
            - trashed
            - viewed
          type: object
        parts:
          type: array
          items:
            $ref: '#/components/schemas/PartMetadata'
        received_at:
          description: When the content was received by Kivra
          type: string
          format: date-time
        receiver_name:
          description: The name of the recipient company
          type: string
          example: Developers Developers Developers AB
        receiver_vat_number:
          $ref: '#/components/schemas/VatNumber'
        sender_icon_url:
          type: string
          example: "https://sandbox-static.kivra.com/img/tenant/1341573157b3a1c55f220f4007b2e44789d2d04015/icon.png"
          format: url
          description: A url to the icon used by the sender within Kivra, or `null` if no corresponding icon exists.
          nullable: true
        sender_name:
          description: The name of the sender
          example: Lenas Konditori AB
          type: string
          nullable: true
        sender_vat_numbers:
          description: VAT numbers representing the sender
          type: array
          items:
            $ref: '#/components/schemas/VatNumber'
          nullable: true
        subject:
          description: Subject of the content
          example: "Invoice: a thousand Swiss rolls"
          type: string
        transaction_at:
          description: |
            The date and time this content conceptually took place.

            + For a normal `invoice` it is the invoice date.
            + For a reminder `invoice` it the original invoice date and not
              the reminders invoice date.
            + For a `receipt` it is its transaction date.
            + For all `other` types of content it is `null`.
            + If no date could be found, it is `null`.
          type: string
          format: date-time
          nullable: true
        type:
          description: The type of the content
          enum:
            - invoice
            - receipt
            - other
          type: string
      required:
        - created_at
        - key
        - labels
        - parts
        - received_at
        - receiver_name
        - receiver_vat_number
        - sender_icon_url
        - sender_name
        - sender_vat_numbers
        - subject
        - transaction_at
        - type
      type: object

    # ##############################################
    # SCHEMA FullContentMetadata
    # ##############################################
    FullContentMetadata:
      description: Details of content metadata
      allOf:
        - type: object
          properties:
            interpreted_fields:
              $ref: '#/components/schemas/InterpretedFields'
            parts:
              description: The files in the content
              type: array
              items:
                $ref: '#/components/schemas/PartMetadata'
            payment_options:
              description: Different ways to pay an invoice
              type: array
              items:
                $ref: '#/components/schemas/PartnerPaymentOption'
            references:
              $ref: '#/components/schemas/InvoiceReferences'
          required:
            - interpreted_fields
            - key
            - labels
            - parts
            - payment_options
            - references
            - received_at
            - receiver_name
            - receiver_vat_number
            - sender_icon_url
            - sender_name
            - sender_vat_numbers
            - subject
            - transaction_at
            - type
        - $ref: '#/components/schemas/BaseContentMetadata'

  # ##############################################
  # SECURITY oAuth2Client
  # ##############################################

  securitySchemes:
    oAuth2Client:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: "https://sender.api.kivra.com/v1/auth"
